
// structure based off https://github.com/JetBrains/intellij-haxe/blob/master/grammar/haXe.bnf

{
    /*parserClass="com.sourcepawn.parser.SourcePawnParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="SourcePawn"
    psiImplClassSuffix="Impl"
    psiPackage="com.sourcepawn.psi"
    psiImplPackage="com.sourcepawn.psi.impl"

    elementTypeHolderClass="com.sourcepawn.psi.SourcePawnTypes"
    elementTypeClass="com.sourcepawn.psi.SourcePawnElementType"
    tokenTypeClass="com.sourcepawn.psi.SourcePawnTokenType"*/

    // from http://www.compuphase.com/pawn/Pawn_Language_Guide.pdf
    tokens = [
        // asignment operators
        OP_EQ="="
        OP_INC_EQ="+="
        OP_DEC_EQ="-="
        OP_MUL_EQ="*="
        OP_DIV_EQ="/="
        OP_REM_EQ="%="
        OP_BITSHIFTR_EQ=">>="
        OP_BITUSHIFTR_EQ=">>>="
        OP_BITSHIFTL_EQ="<<="
        OP_BITAND_EQ="&="
        OP_BITOR_EQ="|="
        OP_BITXOR_EQ="^="

        // relational operators
        OP_EQ_EQ="=="
        OP_NOT_EQ="!="
        OP_LT="<"
        OP_LT_EQ="<="
        OP_GT=">"
        OP_GT_EQ=">="

        // arithmetic operators
        OP_ADD="+"
        OP_SUB="-"
        OP_MUL="*"
        OP_DIV="/"
        OP_REM="%"
        OP_INC="++"
        OP_DEC="--"

        // logical opeartors
        OP_OR="||"
        OP_AND="&&"
        OP_NOT="!"

        // bitwise operators
        OP_BITOR="|"
        OP_BITXOR="^"
        OP_BITNOT="~"
        OP_BITAND="&"
        OP_BITSHIFTR=">>"
        OP_BITUSHIFTR=">>>"
        OP_BITSHIFTL="<<"

        // misc operators
        OP_DEFINED="defined"
        OP_SIZEOF="sizeof"
        OP_STATE="state"
        OP_TAGOF="tagof"

        // brackets
        BRACKET_SQUARE_L="["
        BRACKET_SQUARE_R="]"
        BRACKET_CURLY_L="{"
        BRACKET_CURLY_R="}"
        BRACKET_PARAN_L="("
        BRACKET_PARAN_R=")"

        // general syntax operators
        SYNTAX_ELLIPSIS="..."
        SYNTAX_DOT="."
        SYNTAX_COLON=":"
        SYNTAX_SEMICOLON=";"
        SYNTAX_QUESTION="?"
        SYNTAX_COMMA=","

        // keywords
        KEY_ASSERT="assert"
        KEY_BREAK="break"
        KEY_CASE="case"
        KEY_CONTINUE="continue"
        KEY_DEFAULT="default"
        KEY_DO="do"
        KEY_ELSE="else"
        KEY_EXIT="exit"
        KEY_FOR="for"
        KEY_GOTO="goto"
        KEY_IF="if"
        KEY_RETURN="return"
        KEY_SLEEP="sleep"
        KEY_STATE="state"
        KEY_SWITCH="switch"
        KEY_WHILE="while"

        // directives
        DIR_ASSERT="#assert"
        DIR_DEFINE="#define"
        DIR_ELSE="#else"
        DIR_ELSEIF="#elseif"
        DIR_ENDIF="#endif"
        DIR_ENDINPUT="#endinput"
        DIR_ERROR="#error"
        DIR_FILE="#file"
        DIR_IF="#if"
        DIR_INCLUDE="#include"
        DIR_LINE="#line"
        DIR_PRAGMA="#pragma"
        DIR_PRAGMA_DEPRECATED="regexp:deprecated .*"
        DIR_SECTION="#section"
        DIR_TRYINC="#tryinclude"
        DIR_UNDEF="#undef"

        // other stuff
        OTHER_FORWARD="forward"
        OTHER_NATIVE="native"
        OTHER_PUBLIC="public"
        OTHER_STOCK="stock"
        OTHER_CONST="const"
        OTHER_STATIC="static"
        OTHER_NEW="new"
        OTHER_DECL="decl"
        OTHER_ENUM="enum"
        OTHER_STRUCT="struct"

        // constants
        CONSTANT_HEX="regexp:0x\d+"
        CONSTANT_FLOAT="regexp:-?\d+\.\d+"
        CONSTANT_INTEGER="regexp:-?\d+"
        CONSTANT_BOOLEAN="regexp:(true|false)"
        CONSTANT_STRING="regexp:\"([^\"\\]|\\.)*\""
        CONSTANT_CHARACTER="regexp:'(\\?.|\\\d{3}|\\x\p{Alpha}{3})'"

        // general
        TAG="regexp:[a-zA-Z_][\w@]*:"
        ID="regexp:[a-zA-Z_][\w@]*"
        LINE_COMMENT="regexp://.*"
        BLOCK_COMMENT="regexp:/\*(.|[\r\n])+?\*/"
        PATH="regexp:<.+>"
    ]

    extends(".*(Expression|Constant)")="expression"
    pin(".*Expression")=1
    pin(".*(Directive|Statement)")=1
}

sourcepawnFile ::= topLevelDeclaration*

private topLevelDeclaration ::= directiveDeclaration
                                | structDeclaration
                                | enumDeclaration
                                | functionDeclaration
                                | globalVarDeclaration

/*
    variables
 */

varInit ::= OP_EQ (expression | varBlock)

varBlock ::= BRACKET_CURLY_L <<comma_list varBlockStatement>> BRACKET_CURLY_R
varBlockStatement ::= literalExpression | identifier OP_EQ (identifier | literalExpression)

localVarModifier ::= OTHER_STATIC | OTHER_NEW | OTHER_CONST | OTHER_DECL
localVarDeclaration ::= localVarModifier varDeclarationPartList {pin=1} // todo: is a pin needed?

globalVarModifier ::= OTHER_PUBLIC | OTHER_STATIC | OTHER_NEW | OTHER_CONST | OTHER_DECL
globalVarDeclaration ::= globalVarModifier varDeclarationPartList SYNTAX_SEMICOLON? {pin=1} // todo: is a pin needed?

private varDeclarationPartList ::= <<comma_list varDeclarationPart>> varInit?
varDeclarationPart ::= qualifiedIdentifier (BRACKET_SQUARE_L [sizeofExpression | literalExpression | identifier] BRACKET_SQUARE_R)*

sizeofExpression ::= OP_SIZEOF BRACKET_PARAN_L identifier (BRACKET_SQUARE_L BRACKET_SQUARE_R)* BRACKET_PARAN_R

/*
    ... stuff
 */

identifier ::= ID
qualifiedIdentifier ::= TAG? identifier

meta comma_list ::= <<param>> (SYNTAX_COMMA <<param>>)*
meta optional_comma_list ::= <<param>> (SYNTAX_COMMA <<param>>)* SYNTAX_COMMA?

/*
    lists and junk
 */

assignmentOperator ::= OP_EQ | OP_INC_EQ | OP_DEC_EQ | OP_MUL_EQ | OP_DIV_EQ | OP_REM_EQ | OP_BITSHIFTR_EQ | OP_BITUSHIFTR_EQ | OP_BITSHIFTL_EQ | OP_BITAND_EQ | OP_BITOR_EQ | OP_BITXOR_EQ
equalityOperator ::= OP_EQ_EQ | OP_NOT_EQ
relationalOperator ::= OP_LT | OP_LT_EQ | OP_GT | OP_GT_EQ
arithmeticAdditiveOperator ::= OP_ADD | OP_SUB
arithmeticMultiplicativeOperator ::= OP_MUL | OP_DIV | OP_REM | OP_INC | OP_DEC
//logicalOperator ::= OP_OR | OP_AND | OP_NOT
bitwiseShiftOperator ::= OP_BITSHIFTR | OP_BITUSHIFTR | OP_BITSHIFTL
//bitwiseOperator ::= OP_BITOR | OP_BITXOR | OP_BITNOT | OP_BITAND
miscOperator ::= OP_DEFINED | OP_SIZEOF | OP_STATE | OP_TAGOF
//operatorList ::= assignmentOperator | equalityOperator | relationalOperator | arithmeticAdditiveOperator | arithmeticMultiplicativeOperator | logicalOperator | bitwiseOperator | bitwiseShiftOperator | miscOperator

//bracketList ::= BRACKET_SQUARE_L | BRACKET_SQUARE_R | BRACKET_CURLY_L | BRACKET_CURLY_R | BRACKET_PARAN_L | BRACKET_PARAN_R
//syntaxList ::= SYNTAX_ELLIPSIS | SYNTAX_DOT | SYNTAX_QUESTION | SYNTAX_COMMA | SYNTAX_COLON | SYNTAX_SEMICOLON
//keywordList ::= KEY_ASSERT | KEY_BREAK | KEY_CASE | KEY_CONTINUE | KEY_DEFAULT | KEY_DO | KEY_ELSE | KEY_EXIT | KEY_FOR | KEY_GOTO | KEY_IF | KEY_RETURN | KEY_SLEEP | KEY_STATE | KEY_SWITCH | KEY_WHILE
//directiveList ::= DIR_ASSERT | DIR_DEFINE | DIR_ELSE | DIR_ELSEIF | DIR_ENDIF | DIR_ENDINPUT | DIR_ERROR | DIR_FILE | DIR_IF | DIR_INCLUDE | DIR_LINE | DIR_PRAGMA | DIR_SECTION | DIR_TRYINC | DIR_UNDEF
//otherList ::= OTHER_FORWARD | OTHER_NATIVE | OTHER_PUBLIC | OTHER_STOCK | OTHER_CONST | OTHER_STATIC | OTHER_NEW | OTHER_DECL | OTHER_ENUM | OTHER_STRUCT
constantList ::= CONSTANT_HEX | CONSTANT_FLOAT | CONSTANT_INTEGER | CONSTANT_BOOLEAN | CONSTANT_STRING | CONSTANT_CHARACTER

/*
    directives
 */

directiveDeclaration ::= includeDirective
                     | defineDirective | undefineDirective
                     | pragmaDirective
                     | ifDirective | elseifDirective | elseDirective | endifDirective
                     | endInputDirective

includeDirective ::= DIR_INCLUDE OP_LT? PATH OP_GT?
defineDirective ::= DIR_DEFINE expression expression? // todo: separate this for defining functions ?
undefineDirective ::= DIR_UNDEF identifier
pragmaDirective ::= DIR_PRAGMA (identifier expression | DIR_PRAGMA_DEPRECATED)
ifDirective ::= DIR_IF expression
elseifDirective ::= DIR_ELSEIF expression
elseDirective ::= DIR_ELSE
endifDirective ::= DIR_ENDIF
endInputDirective ::= DIR_ENDINPUT

/*
    struct
 */

structDeclaration ::= OTHER_STRUCT identifier BRACKET_CURLY_L structList BRACKET_CURLY_R SYNTAX_SEMICOLON? {pin=1}
structList ::= <<optional_comma_list localVarDeclaration>>

/*
    enum
 */

enumDeclaration ::= OTHER_ENUM identifier BRACKET_CURLY_L enumList BRACKET_CURLY_R SYNTAX_SEMICOLON {pin=1}
enumList ::= <<optional_comma_list enumListItem>>
enumListItem ::= qualifiedIdentifier [BRACKET_SQUARE_L literalExpression? BRACKET_SQUARE_R | OP_EQ literalExpression]

/*
    functions
 */

functionDeclaration ::= (bareFunctionDeclaration | normalFunctionDeclaration) SYNTAX_SEMICOLON? // todo: recoverWhile ?

private normalFunctionDeclaration ::= [OTHER_PUBLIC | OTHER_STOCK] qualifiedIdentifier BRACKET_PARAN_L functionParameterList? BRACKET_PARAN_R functionBlock {pin=3}
private bareFunctionDeclaration ::= (OTHER_FORWARD | OTHER_NATIVE) qualifiedIdentifier BRACKET_PARAN_L functionParameterList? BRACKET_PARAN_R {pin=1}

functionParameterList ::= <<comma_list functionParameter>>
functionParameter ::= [OTHER_CONST | OP_BITAND] TAG? (SYNTAX_ELLIPSIS | identifier (BRACKET_SQUARE_L expression? BRACKET_SQUARE_R)* varInit?)

functionBlock ::= blockStatement | statement

/*
    statements
 */

private blockStatement ::= BRACKET_CURLY_L (statement SYNTAX_SEMICOLON?)* BRACKET_CURLY_R

statement ::= localVarDeclaration
            | ifStatement
            | elseStatement
            | forStatement
            | whileStatement
            | doWhileStatement
            | returnStatement
            | breakStatement
            | continueStatement
            | switchStatement
            | expression

returnStatement ::= KEY_RETURN expression?
ifStatement ::= KEY_IF BRACKET_PARAN_L expression BRACKET_PARAN_R functionBlock
elseStatement ::= KEY_ELSE functionBlock
whileStatement ::= KEY_WHILE BRACKET_PARAN_L expression BRACKET_PARAN_R functionBlock
doWhileStatement ::= KEY_DO functionBlock KEY_WHILE BRACKET_PARAN_L expression BRACKET_PARAN_R
breakStatement ::= KEY_BREAK
continueStatement ::= KEY_CONTINUE

forStatement ::= KEY_FOR BRACKET_PARAN_L forInitList? SYNTAX_SEMICOLON expression? SYNTAX_SEMICOLON expression? BRACKET_PARAN_R functionBlock
forInitList ::= <<comma_list forInitExpression>>
forInitExpression ::= localVarDeclaration | (identifier assignExpression)

switchStatement ::= KEY_SWITCH BRACKET_PARAN_L expression BRACKET_PARAN_R switchBlock
switchBlock ::= BRACKET_CURLY_L switchCase* defaultCase? BRACKET_CURLY_R {pin=1}
switchCase ::= KEY_CASE <<comma_list literalExpression>> SYNTAX_COLON switchBlockStatement? {pin=1}
defaultCase::= KEY_DEFAULT SYNTAX_COLON switchBlockStatement? {pin=1}

private switchBlockStatement ::= BRACKET_CURLY_L? (statement SYNTAX_SEMICOLON?)* BRACKET_CURLY_R?

/*
    expression
 */

expressionList ::= <<comma_list expression>>

expression ::= assignExpressionWrapper

private assignExpressionWrapper ::= ternaryExpressionWrapper assignExpression*
left assignExpression ::= assignmentOperator ternaryExpressionWrapper

private ternaryExpressionWrapper ::= logicOrExpressionWrapper ternaryExpression*
left ternaryExpression ::= SYNTAX_QUESTION expression SYNTAX_COLON ternaryExpressionWrapper

private logicOrExpressionWrapper ::= logicAndExpressionWrapper logicOrExpression*
left logicOrExpression ::= OP_OR logicAndExpressionWrapper

private logicAndExpressionWrapper ::= equalityExpressionWrapper logicAndExpression*
left logicAndExpression ::= OP_AND equalityExpressionWrapper

private equalityExpressionWrapper ::= relationalExpressionWrapper equalityExpression*
left equalityExpression ::= equalityOperator relationalExpressionWrapper

private relationalExpressionWrapper ::= bitwiseOrExpressionWrapper relationalExpression*
left relationalExpression ::= relationalOperator bitwiseOrExpressionWrapper

private bitwiseOrExpressionWrapper ::= bitwiseXorExpressionWrapper bitwiseOrExpression*
left bitwiseOrExpression ::= OP_BITOR bitwiseXorExpressionWrapper

private bitwiseXorExpressionWrapper ::= bitwiseAndExpressionWrapper bitwiseXorExpression*
left bitwiseXorExpression ::= OP_BITXOR bitwiseAndExpressionWrapper

private bitwiseAndExpressionWrapper ::= bitwiseShiftExpressionWrapper bitwiseAndExpression*
left bitwiseAndExpression ::= OP_BITAND bitwiseShiftExpressionWrapper

private bitwiseShiftExpressionWrapper ::= additiveExpressionWrapper bitwiseShiftExpression*
left bitwiseShiftExpression ::= bitwiseShiftOperator additiveExpressionWrapper

private additiveExpressionWrapper ::= multiplicativeExpressionWrapper additiveExpression*
left additiveExpression ::= arithmeticAdditiveOperator multiplicativeExpressionWrapper

private multiplicativeExpressionWrapper ::= prefixExpression multiplicativeExpression*
left multiplicativeExpression ::= arithmeticMultiplicativeOperator prefixExpression

private prefixExpression ::= prefixOperatorExpression prefixExpression | suffixExpressionWrapper
left prefixOperatorExpression ::= OP_SUB | OP_DEC | OP_INC | OP_NOT | OP_BITNOT

private suffixExpressionWrapper ::= value suffixExpression?
left suffixExpression ::= OP_DEC | OP_INC

private value ::= TAG? (literalExpression
                        | miscPrefixExpression
                        | parenthesizedExpression
                        | callExpression
                        | arrayExpression
                        | identifier)

miscPrefixExpression ::= miscOperator BRACKET_PARAN_L? expression BRACKET_PARAN_R?
callExpression ::= identifier BRACKET_PARAN_L expressionList? BRACKET_PARAN_R {pin=2} // todo: should this not be an expression so no pin needed?
arrayExpression ::= identifier (BRACKET_SQUARE_L expression? BRACKET_SQUARE_R)+ {pin=2} // todo: should this not be an expression so no pin needed?
literalExpression ::= constantList // todo: privatise constant list?
parenthesizedExpression ::= BRACKET_PARAN_L expression BRACKET_PARAN_R