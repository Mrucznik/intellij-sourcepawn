/* The following code was generated by JFlex 1.4.3 on 15/06/14 12:08 PM */

package com.sourcepawn.grammar;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static com.sourcepawn.psi.SourcePawnTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 15/06/14 12:08 PM from the specification file
 * <tt>C:/Users/isaac/Desktop/sourcemod/intellij-sourcepawn-master/src/com/sourcepawn/grammar/_SourcePawnLexer.flex</tt>
 */
public class _SourcePawnLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\2\1\0\1\1\1\1\22\0\1\1\1\44\1\24"+
    "\1\71\1\0\1\40\1\41\1\26\1\57\1\60\1\33\1\37\1\64"+
    "\1\15\1\17\1\32\1\12\11\16\1\61\1\62\1\34\1\36\1\35"+
    "\1\63\1\0\1\104\1\14\1\105\1\14\1\101\1\14\1\31\1\76"+
    "\1\77\5\31\1\106\1\103\2\31\1\102\1\100\2\31\1\75\3\31"+
    "\1\53\1\25\1\54\1\43\1\30\1\0\1\10\1\65\1\7\1\3"+
    "\1\4\1\21\1\52\1\70\1\46\1\31\1\66\1\22\1\72\1\47"+
    "\1\51\1\5\1\31\1\6\1\23\1\11\1\20\1\74\1\67\1\13"+
    "\1\73\1\50\1\55\1\42\1\56\1\45\53\0\1\27\12\0\1\27"+
    "\4\0\1\27\5\0\27\27\1\0\37\27\1\0\u01ca\27\4\0\14\27"+
    "\16\0\5\27\7\0\1\27\1\0\1\27\201\0\5\27\1\0\2\27"+
    "\2\0\4\27\10\0\1\27\1\0\3\27\1\0\1\27\1\0\24\27"+
    "\1\0\123\27\1\0\213\27\10\0\236\27\11\0\46\27\2\0\1\27"+
    "\7\0\47\27\110\0\33\27\5\0\3\27\55\0\53\27\43\0\2\27"+
    "\1\0\143\27\1\0\1\27\17\0\2\27\7\0\2\27\12\0\3\27"+
    "\2\0\1\27\20\0\1\27\1\0\36\27\35\0\131\27\13\0\1\27"+
    "\30\0\41\27\11\0\2\27\4\0\1\27\5\0\26\27\4\0\1\27"+
    "\11\0\1\27\3\0\1\27\27\0\31\27\253\0\66\27\3\0\1\27"+
    "\22\0\1\27\7\0\12\27\17\0\7\27\1\0\7\27\5\0\10\27"+
    "\2\0\2\27\2\0\26\27\1\0\7\27\1\0\1\27\3\0\4\27"+
    "\3\0\1\27\20\0\1\27\15\0\2\27\1\0\3\27\16\0\2\27"+
    "\23\0\6\27\4\0\2\27\2\0\26\27\1\0\7\27\1\0\2\27"+
    "\1\0\2\27\1\0\2\27\37\0\4\27\1\0\1\27\23\0\3\27"+
    "\20\0\11\27\1\0\3\27\1\0\26\27\1\0\7\27\1\0\2\27"+
    "\1\0\5\27\3\0\1\27\22\0\1\27\17\0\2\27\43\0\10\27"+
    "\2\0\2\27\2\0\26\27\1\0\7\27\1\0\2\27\1\0\5\27"+
    "\3\0\1\27\36\0\2\27\1\0\3\27\17\0\1\27\21\0\1\27"+
    "\1\0\6\27\3\0\3\27\1\0\4\27\3\0\2\27\1\0\1\27"+
    "\1\0\2\27\3\0\2\27\3\0\3\27\3\0\14\27\26\0\1\27"+
    "\64\0\10\27\1\0\3\27\1\0\27\27\1\0\12\27\1\0\5\27"+
    "\3\0\1\27\32\0\2\27\6\0\2\27\43\0\10\27\1\0\3\27"+
    "\1\0\27\27\1\0\12\27\1\0\5\27\3\0\1\27\40\0\1\27"+
    "\1\0\2\27\17\0\2\27\22\0\10\27\1\0\3\27\1\0\51\27"+
    "\2\0\1\27\20\0\1\27\21\0\2\27\30\0\6\27\5\0\22\27"+
    "\3\0\30\27\1\0\11\27\1\0\1\27\2\0\7\27\72\0\60\27"+
    "\1\0\2\27\14\0\7\27\72\0\2\27\1\0\1\27\2\0\2\27"+
    "\1\0\1\27\2\0\1\27\6\0\4\27\1\0\7\27\1\0\3\27"+
    "\1\0\1\27\1\0\1\27\2\0\2\27\1\0\4\27\1\0\2\27"+
    "\11\0\1\27\2\0\5\27\1\0\1\27\25\0\2\27\42\0\1\27"+
    "\77\0\10\27\1\0\44\27\33\0\5\27\163\0\53\27\24\0\1\27"+
    "\20\0\6\27\4\0\4\27\3\0\1\27\3\0\2\27\7\0\3\27"+
    "\4\0\15\27\14\0\1\27\21\0\46\27\12\0\53\27\1\0\1\27"+
    "\3\0\u0149\27\1\0\4\27\2\0\7\27\1\0\1\27\1\0\4\27"+
    "\2\0\51\27\1\0\4\27\2\0\41\27\1\0\4\27\2\0\7\27"+
    "\1\0\1\27\1\0\4\27\2\0\17\27\1\0\71\27\1\0\4\27"+
    "\2\0\103\27\45\0\20\27\20\0\125\27\14\0\u026c\27\2\0\21\27"+
    "\1\0\32\27\5\0\113\27\25\0\15\27\1\0\4\27\16\0\22\27"+
    "\16\0\22\27\16\0\15\27\1\0\3\27\17\0\64\27\43\0\1\27"+
    "\4\0\1\27\103\0\130\27\10\0\51\27\1\0\1\27\5\0\106\27"+
    "\12\0\35\27\63\0\36\27\2\0\5\27\13\0\54\27\25\0\7\27"+
    "\70\0\27\27\11\0\65\27\122\0\1\27\135\0\57\27\21\0\7\27"+
    "\67\0\36\27\15\0\2\27\20\0\46\27\32\0\44\27\51\0\3\27"+
    "\12\0\44\27\153\0\4\27\1\0\4\27\16\0\300\27\100\0\u0116\27"+
    "\2\0\6\27\2\0\46\27\2\0\6\27\2\0\10\27\1\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\37\27\2\0\65\27\1\0\7\27"+
    "\1\0\1\27\3\0\3\27\1\0\7\27\3\0\4\27\2\0\6\27"+
    "\4\0\15\27\5\0\3\27\1\0\7\27\164\0\1\27\15\0\1\27"+
    "\20\0\15\27\145\0\1\27\4\0\1\27\2\0\12\27\1\0\1\27"+
    "\3\0\5\27\6\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\1\0\13\27\2\0\4\27\5\0\5\27\4\0\1\27\64\0\2\27"+
    "\u0a7b\0\57\27\1\0\57\27\1\0\205\27\6\0\4\27\21\0\46\27"+
    "\12\0\66\27\11\0\1\27\20\0\27\27\11\0\7\27\1\0\7\27"+
    "\1\0\7\27\1\0\7\27\1\0\7\27\1\0\7\27\1\0\7\27"+
    "\1\0\7\27\120\0\1\27\u01d5\0\2\27\52\0\5\27\5\0\2\27"+
    "\4\0\126\27\6\0\3\27\1\0\132\27\1\0\4\27\5\0\51\27"+
    "\3\0\136\27\21\0\33\27\65\0\20\27\u0200\0\u19b6\27\112\0\u51cc\27"+
    "\64\0\u048d\27\103\0\56\27\2\0\u010d\27\3\0\20\27\12\0\2\27"+
    "\24\0\57\27\20\0\31\27\10\0\106\27\61\0\11\27\2\0\147\27"+
    "\2\0\4\27\1\0\2\27\16\0\12\27\120\0\10\27\1\0\3\27"+
    "\1\0\4\27\1\0\27\27\35\0\64\27\16\0\62\27\76\0\6\27"+
    "\3\0\1\27\16\0\34\27\12\0\27\27\31\0\35\27\7\0\57\27"+
    "\34\0\1\27\60\0\51\27\27\0\3\27\1\0\10\27\24\0\27\27"+
    "\3\0\1\27\5\0\60\27\1\0\1\27\3\0\2\27\2\0\5\27"+
    "\2\0\1\27\1\0\1\27\30\0\3\27\43\0\6\27\2\0\6\27"+
    "\2\0\6\27\11\0\7\27\1\0\7\27\221\0\43\27\35\0\u2ba4\27"+
    "\14\0\27\27\4\0\61\27\u2104\0\u012e\27\2\0\76\27\2\0\152\27"+
    "\46\0\7\27\14\0\5\27\5\0\1\27\1\0\12\27\1\0\15\27"+
    "\1\0\5\27\1\0\1\27\1\0\2\27\1\0\2\27\1\0\154\27"+
    "\41\0\u016b\27\22\0\100\27\2\0\66\27\50\0\14\27\164\0\5\27"+
    "\1\0\207\27\44\0\32\27\6\0\32\27\13\0\131\27\3\0\6\27"+
    "\2\0\6\27\2\0\6\27\2\0\3\27\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\7\3\1\4\1\3\1\5\1\4"+
    "\1\6\2\3\2\1\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\3\3"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\2\3\1\1\3\3\1\35\13\3\1\0"+
    "\1\4\1\36\1\37\1\0\7\3\1\0\1\40\3\0"+
    "\1\41\1\0\1\42\1\43\1\0\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\5\3\12\0\17\3\1\63"+
    "\1\64\1\65\2\3\1\66\6\3\1\67\2\0\1\67"+
    "\1\0\1\70\1\71\1\72\1\73\1\74\4\3\13\0"+
    "\1\75\1\0\3\3\1\76\2\3\1\77\1\100\1\101"+
    "\2\3\1\102\3\3\1\103\11\3\2\0\1\104\1\105"+
    "\1\3\1\106\2\3\14\0\10\3\1\107\1\3\1\110"+
    "\4\3\1\111\1\3\1\112\1\113\2\3\1\0\1\3"+
    "\1\114\1\115\2\0\1\116\5\0\1\117\1\120\2\0"+
    "\5\3\1\121\1\122\1\3\1\123\3\3\1\124\1\125"+
    "\1\126\1\127\1\130\1\0\1\131\1\0\1\132\4\0"+
    "\1\133\2\0\3\3\1\134\1\135\2\3\1\136\1\137"+
    "\1\140\1\141\1\0\1\142\1\143\3\0\3\3\1\144"+
    "\1\145\2\0\1\146\1\147\1\3\1\150\1\3\1\151"+
    "\1\0\1\3\1\152\1\0\1\3\1\153\1\154";

  private static int [] zzUnpackAction() {
    int [] result = new int[315];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u01aa\0\u01f1"+
    "\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354\0\u039b\0\u03e2\0\u0429"+
    "\0\u0470\0\u04b7\0\u04fe\0\u0545\0\u058c\0\u05d3\0\u061a\0\u0661"+
    "\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u07c4\0\u080b\0\107\0\u0852"+
    "\0\u0899\0\u08e0\0\107\0\107\0\107\0\107\0\107\0\107"+
    "\0\107\0\107\0\107\0\107\0\u0927\0\u096e\0\u09b5\0\u09fc"+
    "\0\u0a43\0\u0a8a\0\u030d\0\u0ad1\0\u0b18\0\u0b5f\0\u0ba6\0\u0bed"+
    "\0\u0c34\0\u0c7b\0\u0cc2\0\u0d09\0\u0d50\0\u0d97\0\u0dde\0\u0e25"+
    "\0\107\0\107\0\u0e6c\0\u0eb3\0\u0efa\0\u0f41\0\u0f88\0\u0fcf"+
    "\0\u1016\0\u105d\0\u04b7\0\107\0\u10a4\0\u10eb\0\u1132\0\u1179"+
    "\0\u11c0\0\107\0\107\0\u1207\0\u124e\0\u1207\0\u1295\0\107"+
    "\0\107\0\107\0\107\0\107\0\107\0\107\0\107\0\107"+
    "\0\107\0\107\0\u030d\0\u12dc\0\u1323\0\u136a\0\u13b1\0\u13f8"+
    "\0\u143f\0\u1486\0\u14cd\0\u1514\0\u155b\0\u15a2\0\u15e9\0\u1630"+
    "\0\u1677\0\u16be\0\u1705\0\u174c\0\u1793\0\u17da\0\u1821\0\u1868"+
    "\0\u18af\0\u18f6\0\u193d\0\u1984\0\u19cb\0\u1a12\0\u1a59\0\u1aa0"+
    "\0\u1ae7\0\u0d97\0\u0dde\0\107\0\u1b2e\0\u1b75\0\u1bbc\0\u1c03"+
    "\0\u1c4a\0\u1c91\0\u1cd8\0\u1d1f\0\u1d66\0\107\0\u1dad\0\u1df4"+
    "\0\u10eb\0\u1e3b\0\u1207\0\u1207\0\u1e82\0\107\0\u030d\0\u1ec9"+
    "\0\u1f10\0\u1f57\0\u1f9e\0\u1fe5\0\u202c\0\u2073\0\u20ba\0\u2101"+
    "\0\u2148\0\u218f\0\u21d6\0\u221d\0\u2264\0\u22ab\0\107\0\u22f2"+
    "\0\u2339\0\u2380\0\u23c7\0\u030d\0\u240e\0\u2455\0\u030d\0\u030d"+
    "\0\u030d\0\u249c\0\u24e3\0\u030d\0\u252a\0\u2571\0\u25b8\0\u030d"+
    "\0\u25ff\0\u2646\0\u268d\0\u26d4\0\u271b\0\u2762\0\u27a9\0\u27f0"+
    "\0\u2837\0\u287e\0\u28c5\0\107\0\107\0\u290c\0\u030d\0\u2953"+
    "\0\u299a\0\u29e1\0\u2a28\0\u2a6f\0\u2ab6\0\u2afd\0\u2b44\0\u2b8b"+
    "\0\u2bd2\0\u2c19\0\u2c60\0\u2ca7\0\u2cee\0\u2d35\0\u2d7c\0\u2dc3"+
    "\0\u2e0a\0\u2e51\0\u2e98\0\u2edf\0\u2f26\0\u030d\0\u2f6d\0\u030d"+
    "\0\u2fb4\0\u2ffb\0\u3042\0\u3089\0\u030d\0\u30d0\0\u030d\0\u030d"+
    "\0\u3117\0\u315e\0\u31a5\0\u31ec\0\u030d\0\u030d\0\u3233\0\u327a"+
    "\0\u32c1\0\u3308\0\u334f\0\u3396\0\u33dd\0\u3424\0\107\0\107"+
    "\0\u346b\0\u34b2\0\u34f9\0\u3540\0\u3587\0\u35ce\0\u3615\0\u030d"+
    "\0\u030d\0\u365c\0\u030d\0\u36a3\0\u36ea\0\u3731\0\u030d\0\u030d"+
    "\0\u030d\0\u030d\0\u030d\0\u3778\0\107\0\u37bf\0\107\0\u3806"+
    "\0\u384d\0\u3894\0\u38db\0\107\0\u3922\0\u3969\0\u39b0\0\u39f7"+
    "\0\u3a3e\0\u030d\0\u030d\0\u3a85\0\u3acc\0\u030d\0\u030d\0\107"+
    "\0\107\0\u3b13\0\107\0\107\0\u3b5a\0\u3ba1\0\u3be8\0\u3c2f"+
    "\0\u3c76\0\u3cbd\0\u030d\0\u030d\0\u3d04\0\u3d4b\0\107\0\107"+
    "\0\u3d92\0\u030d\0\u3dd9\0\107\0\u3e20\0\u3e67\0\u3eae\0\u3ef5"+
    "\0\u3f3c\0\107\0\u030d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[315];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\2\14\1\15\1\16\1\17\1\14\1\20"+
    "\1\14\1\21\1\22\1\2\1\23\1\2\2\14\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\2\14\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\14\1\56\1\14\1\57\3\14\1\60"+
    "\10\14\1\61\110\0\2\3\107\0\1\14\1\62\10\14"+
    "\1\0\1\14\1\0\4\14\4\0\2\14\14\0\3\14"+
    "\1\63\1\14\12\0\4\14\1\0\15\14\3\0\10\14"+
    "\1\64\1\14\1\0\1\14\1\0\2\14\1\65\1\14"+
    "\4\0\2\14\14\0\1\14\1\66\3\14\12\0\4\14"+
    "\1\0\15\14\3\0\12\14\1\0\1\14\1\0\1\67"+
    "\3\14\4\0\2\14\14\0\5\14\12\0\4\14\1\0"+
    "\15\14\3\0\1\14\1\70\10\14\1\0\1\14\1\0"+
    "\4\14\4\0\2\14\14\0\5\14\12\0\4\14\1\0"+
    "\15\14\3\0\5\14\1\71\4\14\1\0\1\14\1\0"+
    "\4\14\4\0\2\14\14\0\3\14\1\72\1\14\12\0"+
    "\4\14\1\0\15\14\3\0\12\14\1\0\1\14\1\0"+
    "\3\14\1\73\4\0\2\14\14\0\5\14\12\0\4\14"+
    "\1\0\15\14\3\0\3\14\1\74\1\14\1\75\4\14"+
    "\1\0\1\14\1\0\4\14\4\0\2\14\14\0\5\14"+
    "\12\0\4\14\1\0\15\14\3\0\7\14\1\16\1\76"+
    "\1\14\1\0\1\16\1\77\4\14\4\0\2\14\14\0"+
    "\5\14\12\0\4\14\1\0\15\14\3\0\12\14\1\0"+
    "\1\14\1\0\4\14\4\0\2\14\14\0\5\14\12\0"+
    "\4\14\1\0\15\14\12\0\1\100\2\0\1\101\1\100"+
    "\17\0\1\102\53\0\7\14\1\16\2\14\1\0\1\16"+
    "\1\77\4\14\4\0\2\14\14\0\5\14\12\0\4\14"+
    "\1\0\15\14\17\0\1\103\72\0\5\14\1\104\4\14"+
    "\1\0\1\14\1\0\1\105\3\14\4\0\2\14\14\0"+
    "\3\14\1\106\1\14\12\0\4\14\1\0\15\14\3\0"+
    "\6\14\1\107\3\14\1\0\1\14\1\0\2\14\1\110"+
    "\1\14\4\0\2\14\14\0\1\111\4\14\12\0\2\14"+
    "\1\112\1\14\1\0\15\14\24\113\1\114\1\115\61\113"+
    "\2\116\1\0\22\116\1\117\61\116\32\0\1\120\1\121"+
    "\2\0\1\122\106\0\1\123\50\0\2\124\1\0\31\124"+
    "\1\125\1\124\1\126\50\124\35\0\1\127\1\130\106\0"+
    "\1\131\106\0\1\132\1\133\105\0\1\134\106\0\1\135"+
    "\2\0\1\136\103\0\1\137\3\0\1\140\102\0\1\141"+
    "\106\0\1\142\53\0\12\14\1\0\1\14\1\0\1\14"+
    "\1\143\2\14\4\0\2\14\14\0\5\14\12\0\4\14"+
    "\1\0\15\14\3\0\1\14\1\144\3\14\1\145\4\14"+
    "\1\0\1\14\1\0\4\14\4\0\2\14\14\0\5\14"+
    "\12\0\4\14\1\0\15\14\3\0\12\14\1\0\1\14"+
    "\1\0\4\14\4\0\2\14\14\0\3\14\1\146\1\14"+
    "\12\0\4\14\1\0\15\14\3\0\3\14\1\147\6\14"+
    "\1\0\1\14\1\0\4\14\4\0\2\14\14\0\5\14"+
    "\12\0\4\14\1\0\15\14\3\0\12\14\1\0\1\14"+
    "\1\0\4\14\4\0\2\14\14\0\5\14\12\0\3\14"+
    "\1\150\1\0\15\14\3\0\1\151\1\152\1\153\2\0"+
    "\1\154\1\155\6\0\1\156\1\157\1\160\1\161\22\0"+
    "\1\162\43\0\12\14\1\0\1\14\1\0\4\14\4\0"+
    "\2\14\14\0\5\14\12\0\4\14\1\0\4\14\1\163"+
    "\10\14\3\0\12\14\1\0\1\14\1\0\4\14\4\0"+
    "\2\14\14\0\5\14\12\0\4\14\1\0\11\14\1\164"+
    "\3\14\3\0\2\14\1\165\1\14\1\166\5\14\1\0"+
    "\1\14\1\0\1\14\1\167\2\14\4\0\2\14\14\0"+
    "\5\14\12\0\4\14\1\0\15\14\3\0\12\14\1\0"+
    "\1\14\1\0\4\14\4\0\2\14\14\0\1\170\4\14"+
    "\12\0\4\14\1\0\15\14\3\0\12\14\1\0\1\14"+
    "\1\0\3\14\1\171\4\0\2\14\14\0\5\14\12\0"+
    "\4\14\1\0\15\14\3\0\12\14\1\0\1\14\1\0"+
    "\1\172\3\14\4\0\2\14\14\0\5\14\12\0\4\14"+
    "\1\0\15\14\3\0\12\14\1\0\1\14\1\0\4\14"+
    "\4\0\2\14\14\0\5\14\12\0\1\173\3\14\1\0"+
    "\15\14\3\0\6\14\1\174\3\14\1\0\1\14\1\0"+
    "\4\14\4\0\2\14\14\0\5\14\12\0\4\14\1\0"+
    "\15\14\3\0\12\14\1\0\1\14\1\0\3\14\1\175"+
    "\4\0\2\14\14\0\5\14\12\0\4\14\1\0\15\14"+
    "\3\0\12\14\1\0\1\14\1\0\4\14\4\0\2\14"+
    "\14\0\1\14\1\176\3\14\12\0\4\14\1\0\15\14"+
    "\3\0\12\14\1\0\1\14\1\0\3\14\1\177\4\0"+
    "\2\14\14\0\5\14\12\0\4\14\1\0\15\14\3\0"+
    "\12\14\1\0\1\14\1\0\1\200\3\14\4\0\2\14"+
    "\14\0\5\14\12\0\4\14\1\0\15\14\3\0\12\14"+
    "\1\0\1\14\1\0\4\14\4\0\2\14\14\0\4\14"+
    "\1\201\12\0\4\14\1\0\15\14\3\0\2\202\2\14"+
    "\2\202\3\14\1\202\1\0\1\14\1\0\1\14\1\202"+
    "\2\14\4\0\2\14\14\0\5\14\12\0\1\202\3\14"+
    "\1\0\7\14\1\202\2\14\2\202\1\14\12\0\1\203"+
    "\3\0\1\203\102\0\1\100\3\0\1\100\1\77\106\0"+
    "\1\204\72\0\12\14\1\0\1\14\1\0\2\14\1\205"+
    "\1\14\4\0\2\14\14\0\5\14\12\0\4\14\1\0"+
    "\15\14\3\0\12\14\1\0\1\14\1\0\4\14\4\0"+
    "\2\14\14\0\1\14\1\206\3\14\12\0\4\14\1\0"+
    "\15\14\3\0\3\14\1\207\6\14\1\0\1\14\1\0"+
    "\4\14\4\0\2\14\14\0\5\14\12\0\4\14\1\0"+
    "\15\14\3\0\3\14\1\210\1\14\1\211\4\14\1\0"+
    "\1\14\1\0\4\14\4\0\2\14\14\0\3\14\1\212"+
    "\1\14\12\0\4\14\1\0\15\14\3\0\1\14\1\213"+
    "\10\14\1\0\1\14\1\0\4\14\4\0\2\14\14\0"+
    "\5\14\12\0\4\14\1\0\15\14\3\0\12\14\1\0"+
    "\1\14\1\0\4\14\4\0\2\14\14\0\2\14\1\214"+
    "\2\14\12\0\4\14\1\0\15\14\3\0\12\14\1\0"+
    "\1\14\1\0\4\14\4\0\2\14\14\0\1\215\4\14"+
    "\12\0\4\14\1\0\15\14\2\113\1\0\104\113\26\0"+
    "\1\216\60\0\2\116\1\0\7\116\1\217\1\220\2\116"+
    "\1\217\7\116\1\221\60\116\2\120\1\0\104\120\33\121"+
    "\1\222\53\121\2\124\1\0\32\124\1\223\53\124\1\0"+
    "\32\124\1\223\1\224\50\124\35\0\1\225\1\226\53\0"+
    "\12\14\1\0\1\14\1\0\4\14\4\0\2\14\14\0"+
    "\5\14\12\0\2\14\1\227\1\14\1\0\15\14\3\0"+
    "\6\14\1\230\3\14\1\0\1\14\1\0\4\14\4\0"+
    "\2\14\14\0\5\14\12\0\4\14\1\0\15\14\3\0"+
    "\6\14\1\231\3\14\1\0\1\14\1\0\4\14\4\0"+
    "\2\14\14\0\5\14\12\0\4\14\1\0\15\14\3\0"+
    "\1\14\1\232\10\14\1\0\1\14\1\0\4\14\4\0"+
    "\2\14\14\0\5\14\12\0\4\14\1\0\15\14\3\0"+
    "\12\14\1\0\1\14\1\0\4\14\4\0\2\14\14\0"+
    "\1\233\4\14\12\0\4\14\1\0\15\14\4\0\1\234"+
    "\110\0\1\235\13\0\1\236\24\0\1\237\45\0\1\240"+
    "\123\0\1\241\71\0\1\242\147\0\1\243\105\0\1\244"+
    "\106\0\1\245\44\0\1\246\123\0\1\247\25\0\1\250"+
    "\42\0\12\14\1\0\1\14\1\0\4\14\4\0\2\14"+
    "\14\0\5\14\12\0\4\14\1\0\5\14\1\251\7\14"+
    "\3\0\12\14\1\0\1\14\1\0\4\14\4\0\1\252"+
    "\1\14\14\0\5\14\12\0\4\14\1\0\15\14\3\0"+
    "\3\14\1\253\6\14\1\0\1\14\1\0\4\14\4\0"+
    "\2\14\14\0\5\14\12\0\4\14\1\0\15\14\3\0"+
    "\12\14\1\0\1\14\1\0\2\14\1\254\1\14\4\0"+
    "\2\14\14\0\5\14\12\0\4\14\1\0\15\14\3\0"+
    "\5\14\1\255\4\14\1\0\1\14\1\0\4\14\4\0"+
    "\2\14\14\0\1\256\4\14\12\0\4\14\1\0\15\14"+
    "\3\0\6\14\1\257\3\14\1\0\1\14\1\0\4\14"+
    "\4\0\2\14\14\0\5\14\12\0\4\14\1\0\15\14"+
    "\3\0\1\14\1\260\10\14\1\0\1\14\1\0\4\14"+
    "\4\0\2\14\14\0\5\14\12\0\4\14\1\0\15\14"+
    "\3\0\12\14\1\0\1\14\1\0\4\14\4\0\2\14"+
    "\14\0\5\14\12\0\4\14\1\0\1\261\14\14\3\0"+
    "\12\14\1\0\1\14\1\0\2\14\1\262\1\14\4\0"+
    "\2\14\14\0\5\14\12\0\4\14\1\0\15\14\3\0"+
    "\12\14\1\0\1\14\1\0\1\263\3\14\4\0\2\14"+
    "\14\0\5\14\12\0\4\14\1\0\15\14\3\0\1\14"+
    "\1\264\10\14\1\0\1\14\1\0\4\14\4\0\2\14"+
    "\14\0\5\14\12\0\4\14\1\0\15\14\3\0\6\14"+
    "\1\265\3\14\1\0\1\14\1\0\3\14\1\266\4\0"+
    "\2\14\14\0\5\14\12\0\4\14\1\0\15\14\3\0"+
    "\1\14\1\267\10\14\1\0\1\14\1\0\4\14\4\0"+
    "\2\14\14\0\5\14\12\0\4\14\1\0\15\14\3\0"+
    "\1\14\1\270\10\14\1\0\1\14\1\0\4\14\4\0"+
    "\2\14\14\0\5\14\12\0\4\14\1\0\15\14\3\0"+
    "\12\14\1\0\1\14\1\0\4\14\4\0\2\14\14\0"+
    "\3\14\1\271\1\14\12\0\4\14\1\0\15\14\3\0"+
    "\12\14\1\0\1\14\1\0\3\14\1\200\4\0\2\14"+
    "\14\0\5\14\12\0\4\14\1\0\15\14\3\0\4\14"+
    "\1\272\5\14\1\0\1\14\1\0\4\14\4\0\2\14"+
    "\14\0\5\14\12\0\4\14\1\0\15\14\3\0\12\14"+
    "\1\0\1\14\1\0\4\14\4\0\2\14\14\0\5\14"+
    "\12\0\2\14\1\273\1\14\1\0\15\14\3\0\12\14"+
    "\1\0\1\14\1\0\1\274\3\14\4\0\2\14\14\0"+
    "\5\14\12\0\4\14\1\0\15\14\3\0\6\14\1\275"+
    "\3\14\1\0\1\14\1\0\4\14\4\0\2\14\14\0"+
    "\5\14\12\0\4\14\1\0\15\14\3\0\4\14\1\276"+
    "\5\14\1\0\1\14\1\0\4\14\4\0\2\14\14\0"+
    "\5\14\12\0\4\14\1\0\15\14\3\0\1\14\1\277"+
    "\10\14\1\0\1\14\1\0\4\14\4\0\2\14\14\0"+
    "\5\14\12\0\4\14\1\0\15\14\3\0\1\14\1\300"+
    "\10\14\1\0\1\14\1\0\4\14\4\0\2\14\14\0"+
    "\5\14\12\0\4\14\1\0\15\14\3\0\6\14\1\301"+
    "\3\14\1\0\1\14\1\0\4\14\4\0\2\14\14\0"+
    "\5\14\12\0\4\14\1\0\15\14\12\0\1\302\3\0"+
    "\1\302\7\0\1\216\63\0\7\303\1\0\2\303\3\0"+
    "\4\303\2\0\1\216\1\303\1\0\1\303\14\0\5\303"+
    "\12\0\4\303\1\0\15\303\32\121\1\304\1\222\53\121"+
    "\36\0\1\305\53\0\12\14\1\0\1\14\1\0\4\14"+
    "\4\0\2\14\14\0\1\306\4\14\12\0\4\14\1\0"+
    "\15\14\3\0\12\14\1\0\1\14\1\0\4\14\4\0"+
    "\2\14\14\0\3\14\1\307\1\14\12\0\4\14\1\0"+
    "\15\14\3\0\5\14\1\310\4\14\1\0\1\14\1\0"+
    "\4\14\4\0\2\14\14\0\5\14\12\0\4\14\1\0"+
    "\15\14\3\0\12\14\1\0\1\14\1\0\2\14\1\311"+
    "\1\14\4\0\2\14\14\0\5\14\12\0\4\14\1\0"+
    "\15\14\21\0\1\312\73\0\1\313\123\0\1\314\66\0"+
    "\1\315\113\0\1\316\121\0\1\317\156\0\1\320\16\0"+
    "\1\321\125\0\1\322\133\0\1\323\46\0\1\324\106\0"+
    "\1\325\102\0\12\14\1\0\1\14\1\0\4\14\4\0"+
    "\2\14\14\0\5\14\12\0\4\14\1\0\6\14\1\326"+
    "\6\14\3\0\12\14\1\0\1\14\1\0\4\14\4\0"+
    "\2\14\14\0\5\14\12\0\4\14\1\0\10\14\1\327"+
    "\4\14\3\0\1\14\1\330\10\14\1\0\1\14\1\0"+
    "\4\14\4\0\2\14\14\0\5\14\12\0\4\14\1\0"+
    "\15\14\3\0\12\14\1\0\1\14\1\0\1\331\3\14"+
    "\4\0\2\14\14\0\5\14\12\0\4\14\1\0\15\14"+
    "\3\0\12\14\1\0\1\14\1\0\4\14\4\0\2\14"+
    "\14\0\1\14\1\332\3\14\12\0\4\14\1\0\15\14"+
    "\3\0\12\14\1\0\1\14\1\0\4\14\4\0\2\14"+
    "\14\0\1\333\4\14\12\0\4\14\1\0\15\14\3\0"+
    "\3\14\1\334\6\14\1\0\1\14\1\0\4\14\4\0"+
    "\2\14\14\0\5\14\12\0\4\14\1\0\15\14\3\0"+
    "\12\14\1\0\1\14\1\0\4\14\4\0\2\14\14\0"+
    "\1\335\4\14\12\0\4\14\1\0\15\14\3\0\6\14"+
    "\1\336\3\14\1\0\1\14\1\0\4\14\4\0\2\14"+
    "\14\0\5\14\12\0\4\14\1\0\15\14\3\0\3\14"+
    "\1\337\6\14\1\0\1\14\1\0\4\14\4\0\2\14"+
    "\14\0\5\14\12\0\4\14\1\0\15\14\3\0\12\14"+
    "\1\0\1\14\1\0\1\14\1\340\2\14\4\0\2\14"+
    "\14\0\5\14\12\0\4\14\1\0\15\14\3\0\1\14"+
    "\1\341\4\14\1\342\3\14\1\0\1\14\1\0\4\14"+
    "\4\0\2\14\14\0\5\14\12\0\4\14\1\0\15\14"+
    "\3\0\5\14\1\343\4\14\1\0\1\14\1\0\4\14"+
    "\4\0\2\14\14\0\5\14\12\0\4\14\1\0\15\14"+
    "\3\0\4\14\1\344\5\14\1\0\1\14\1\0\4\14"+
    "\4\0\2\14\14\0\5\14\12\0\4\14\1\0\15\14"+
    "\3\0\1\14\1\345\10\14\1\0\1\14\1\0\4\14"+
    "\4\0\2\14\14\0\1\346\4\14\12\0\4\14\1\0"+
    "\15\14\3\0\12\14\1\0\1\14\1\0\4\14\4\0"+
    "\2\14\14\0\5\14\12\0\1\14\1\347\2\14\1\0"+
    "\15\14\3\0\2\14\1\350\7\14\1\0\1\14\1\0"+
    "\4\14\4\0\2\14\14\0\5\14\12\0\4\14\1\0"+
    "\15\14\3\0\12\14\1\0\1\14\1\0\4\14\4\0"+
    "\2\14\14\0\3\14\1\351\1\14\12\0\4\14\1\0"+
    "\15\14\3\0\4\14\1\352\5\14\1\0\1\14\1\0"+
    "\4\14\4\0\2\14\14\0\5\14\12\0\4\14\1\0"+
    "\15\14\12\0\1\116\3\0\1\116\73\0\7\353\1\0"+
    "\2\353\3\0\4\353\3\0\1\353\1\0\1\353\14\0"+
    "\5\353\12\0\4\353\1\0\15\353\3\0\12\14\1\0"+
    "\1\14\1\0\4\14\4\0\2\14\14\0\5\14\12\0"+
    "\4\14\1\0\2\14\1\354\12\14\3\0\12\14\1\0"+
    "\1\14\1\0\4\14\4\0\2\14\14\0\5\14\12\0"+
    "\1\14\1\355\2\14\1\0\15\14\3\0\1\14\1\356"+
    "\10\14\1\0\1\14\1\0\4\14\4\0\2\14\14\0"+
    "\5\14\12\0\4\14\1\0\15\14\46\0\1\357\111\0"+
    "\1\360\41\0\1\361\150\0\1\362\112\0\1\363\40\0"+
    "\1\364\150\0\1\365\44\0\1\366\106\0\1\367\106\0"+
    "\1\370\113\0\1\371\117\0\1\372\67\0\12\14\1\0"+
    "\1\14\1\0\4\14\4\0\2\14\14\0\5\14\12\0"+
    "\4\14\1\0\7\14\1\373\5\14\3\0\12\14\1\0"+
    "\1\14\1\0\4\14\4\0\2\14\14\0\5\14\12\0"+
    "\4\14\1\0\6\14\1\374\6\14\3\0\4\14\1\375"+
    "\5\14\1\0\1\14\1\0\4\14\4\0\2\14\14\0"+
    "\5\14\12\0\4\14\1\0\15\14\3\0\12\14\1\0"+
    "\1\14\1\0\2\14\1\376\1\14\4\0\2\14\14\0"+
    "\5\14\12\0\4\14\1\0\15\14\3\0\1\14\1\377"+
    "\10\14\1\0\1\14\1\0\4\14\4\0\2\14\14\0"+
    "\5\14\12\0\4\14\1\0\15\14\3\0\4\14\1\u0100"+
    "\5\14\1\0\1\14\1\0\4\14\4\0\2\14\14\0"+
    "\5\14\12\0\4\14\1\0\15\14\3\0\12\14\1\0"+
    "\1\14\1\0\4\14\4\0\2\14\14\0\1\14\1\u0101"+
    "\3\14\12\0\4\14\1\0\15\14\3\0\12\14\1\0"+
    "\1\14\1\0\4\14\4\0\2\14\14\0\1\14\1\u0102"+
    "\3\14\12\0\4\14\1\0\15\14\3\0\6\14\1\u0103"+
    "\3\14\1\0\1\14\1\0\4\14\4\0\2\14\14\0"+
    "\5\14\12\0\4\14\1\0\15\14\3\0\12\14\1\0"+
    "\1\14\1\0\4\14\4\0\2\14\14\0\1\14\1\u0104"+
    "\3\14\12\0\4\14\1\0\15\14\3\0\5\14\1\u0105"+
    "\4\14\1\0\1\14\1\0\4\14\4\0\2\14\14\0"+
    "\5\14\12\0\4\14\1\0\15\14\3\0\3\14\1\u0106"+
    "\6\14\1\0\1\14\1\0\4\14\4\0\2\14\14\0"+
    "\5\14\12\0\4\14\1\0\15\14\3\0\6\14\1\u0107"+
    "\3\14\1\0\1\14\1\0\4\14\4\0\2\14\14\0"+
    "\5\14\12\0\4\14\1\0\15\14\3\0\4\14\1\u0108"+
    "\5\14\1\0\1\14\1\0\4\14\4\0\2\14\14\0"+
    "\5\14\12\0\4\14\1\0\15\14\3\0\12\14\1\0"+
    "\1\14\1\0\1\14\1\u0109\2\14\4\0\2\14\14\0"+
    "\5\14\12\0\4\14\1\0\15\14\3\0\12\14\1\0"+
    "\1\14\1\0\4\14\4\0\2\14\14\0\5\14\12\0"+
    "\3\14\1\u010a\1\0\15\14\3\0\7\116\1\0\2\116"+
    "\3\0\4\116\3\0\1\116\1\0\1\116\14\0\5\116"+
    "\12\0\4\116\1\0\15\116\3\0\1\14\1\u010b\10\14"+
    "\1\0\1\14\1\0\4\14\4\0\2\14\14\0\5\14"+
    "\12\0\4\14\1\0\15\14\47\0\1\u010c\45\0\1\u010d"+
    "\146\0\1\u010e\61\0\1\u010f\25\0\1\u0110\131\0\1\u0111"+
    "\22\0\1\u0112\147\0\1\u0113\60\0\1\u0114\133\0\1\u0115"+
    "\60\0\1\u0116\71\0\12\14\1\0\1\14\1\0\4\14"+
    "\4\0\1\u0117\1\14\14\0\5\14\12\0\4\14\1\0"+
    "\15\14\3\0\12\14\1\0\1\14\1\0\4\14\4\0"+
    "\2\14\14\0\5\14\12\0\4\14\1\0\12\14\1\u0118"+
    "\2\14\3\0\5\14\1\u0119\4\14\1\0\1\14\1\0"+
    "\4\14\4\0\2\14\14\0\5\14\12\0\4\14\1\0"+
    "\15\14\3\0\6\14\1\u011a\3\14\1\0\1\14\1\0"+
    "\4\14\4\0\2\14\14\0\5\14\12\0\4\14\1\0"+
    "\15\14\3\0\1\u011b\11\14\1\0\1\14\1\0\4\14"+
    "\4\0\2\14\14\0\5\14\12\0\4\14\1\0\15\14"+
    "\3\0\12\14\1\0\1\14\1\0\1\u011c\3\14\4\0"+
    "\2\14\14\0\5\14\12\0\4\14\1\0\15\14\3\0"+
    "\12\14\1\0\1\14\1\0\1\u011d\3\14\4\0\2\14"+
    "\14\0\5\14\12\0\4\14\1\0\15\14\3\0\12\14"+
    "\1\0\1\14\1\0\4\14\4\0\2\14\14\0\4\14"+
    "\1\u011e\12\0\4\14\1\0\15\14\3\0\1\u011f\11\14"+
    "\1\0\1\14\1\0\4\14\4\0\2\14\14\0\5\14"+
    "\12\0\4\14\1\0\15\14\4\0\1\u0120\123\0\1\u0121"+
    "\72\0\1\u0122\111\0\1\u0123\107\0\1\u0124\104\0\1\u0125"+
    "\150\0\1\u0126\40\0\1\u0127\106\0\12\14\1\0\1\14"+
    "\1\0\4\14\4\0\2\14\14\0\5\14\12\0\4\14"+
    "\1\0\10\14\1\u0128\4\14\3\0\12\14\1\0\1\14"+
    "\1\0\4\14\4\0\2\14\14\0\5\14\12\0\4\14"+
    "\1\0\6\14\1\u0129\6\14\3\0\6\14\1\u012a\3\14"+
    "\1\0\1\14\1\0\4\14\4\0\2\14\14\0\5\14"+
    "\12\0\4\14\1\0\15\14\3\0\1\14\1\u012b\10\14"+
    "\1\0\1\14\1\0\4\14\4\0\2\14\14\0\5\14"+
    "\12\0\4\14\1\0\15\14\3\0\12\14\1\0\1\14"+
    "\1\0\4\14\4\0\2\14\14\0\5\14\12\0\4\14"+
    "\1\0\1\u012c\14\14\20\0\1\u012d\110\0\1\u012e\133\0"+
    "\1\u012f\43\0\1\u0130\105\0\12\14\1\0\1\14\1\0"+
    "\4\14\4\0\2\14\14\0\5\14\12\0\4\14\1\0"+
    "\11\14\1\u0131\3\14\3\0\12\14\1\0\1\14\1\0"+
    "\4\14\4\0\2\14\14\0\5\14\12\0\4\14\1\0"+
    "\7\14\1\u0132\5\14\3\0\1\14\1\u0133\10\14\1\0"+
    "\1\14\1\0\4\14\4\0\2\14\14\0\5\14\12\0"+
    "\4\14\1\0\15\14\11\0\1\u0134\115\0\1\u0135\71\0"+
    "\12\14\1\0\1\14\1\0\4\14\4\0\2\14\14\0"+
    "\5\14\12\0\4\14\1\0\12\14\1\u0136\2\14\3\0"+
    "\1\u0137\11\14\1\0\1\14\1\0\4\14\4\0\2\14"+
    "\14\0\5\14\12\0\4\14\1\0\15\14\3\0\1\u0138"+
    "\106\0\12\14\1\0\1\14\1\0\4\14\4\0\2\14"+
    "\14\0\5\14\12\0\4\14\1\0\13\14\1\u0139\1\14"+
    "\2\u0137\1\0\104\u0137\4\0\1\u013a\105\0\12\14\1\0"+
    "\1\14\1\0\4\14\4\0\2\14\14\0\5\14\12\0"+
    "\4\14\1\0\7\14\1\u013b\5\14";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16259];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\34\1\1\11\3\1\12\11\22\1\1\0"+
    "\1\1\2\11\1\0\7\1\1\0\1\11\3\0\1\1"+
    "\1\0\2\11\1\0\3\1\13\11\6\1\12\0\21\1"+
    "\1\11\11\1\1\11\2\0\1\1\1\0\3\1\1\11"+
    "\5\1\13\0\1\11\1\0\31\1\2\0\2\11\4\1"+
    "\14\0\25\1\1\0\3\1\2\0\1\1\5\0\2\11"+
    "\2\0\21\1\1\0\1\11\1\0\1\11\4\0\1\11"+
    "\2\0\11\1\2\11\1\0\2\11\3\0\5\1\2\0"+
    "\2\11\3\1\1\11\1\0\2\1\1\0\1\1\1\11"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[315];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _SourcePawnLexer() {
    this((java.io.Reader)null);
  }


  public _SourcePawnLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _SourcePawnLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1614) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 68: 
          { return BLOCK_COMMENT;
          }
        case 109: break;
        case 85: 
          { return OTHER_STATIC;
          }
        case 110: break;
        case 62: 
          { return OTHER_DECL;
          }
        case 111: break;
        case 42: 
          { return OP_INC;
          }
        case 112: break;
        case 41: 
          { return OP_INC_EQ;
          }
        case 113: break;
        case 97: 
          { return DIR_ELSEIF;
          }
        case 114: break;
        case 72: 
          { return OP_TAGOF;
          }
        case 115: break;
        case 79: 
          { return DIR_FILE;
          }
        case 116: break;
        case 18: 
          { return OP_BITNOT;
          }
        case 117: break;
        case 44: 
          { return OP_BITAND_EQ;
          }
        case 118: break;
        case 43: 
          { return OP_REM_EQ;
          }
        case 119: break;
        case 52: 
          { return CONSTANT_FLOAT;
          }
        case 120: break;
        case 98: 
          { return DIR_PRAGMA;
          }
        case 121: break;
        case 32: 
          { return CONSTANT_STRING;
          }
        case 122: break;
        case 49: 
          { return OP_NOT_EQ;
          }
        case 123: break;
        case 78: 
          { return DIR_ELSE;
          }
        case 124: break;
        case 94: 
          { return OTHER_FUNCTAG;
          }
        case 125: break;
        case 29: 
          { return KEY_DO;
          }
        case 126: break;
        case 3: 
          { return ID;
          }
        case 127: break;
        case 11: 
          { return OP_EQ;
          }
        case 128: break;
        case 104: 
          { return OP_STATE;
          }
        case 129: break;
        case 92: 
          { return KEY_DEFAULT;
          }
        case 130: break;
        case 30: 
          { return OP_DEC;
          }
        case 131: break;
        case 27: 
          { return SYNTAX_QUESTION;
          }
        case 132: break;
        case 82: 
          { return KEY_RETURN;
          }
        case 133: break;
        case 103: 
          { return DIR_INCLUDE;
          }
        case 134: break;
        case 51: 
          { return CONSTANT_HEX;
          }
        case 135: break;
        case 15: 
          { return OP_BITOR;
          }
        case 136: break;
        case 83: 
          { return KEY_ASSERT;
          }
        case 137: break;
        case 5: 
          { return OP_SUB;
          }
        case 138: break;
        case 93: 
          { return OP_DEFINED;
          }
        case 139: break;
        case 6: 
          { return SYNTAX_DOT;
          }
        case 140: break;
        case 64: 
          { return KEY_ELSE;
          }
        case 141: break;
        case 84: 
          { return OTHER_STRUCT;
          }
        case 142: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 143: break;
        case 71: 
          { return OTHER_CONST;
          }
        case 144: break;
        case 73: 
          { return KEY_STATE;
          }
        case 145: break;
        case 70: 
          { return KEY_GOTO;
          }
        case 146: break;
        case 23: 
          { return BRACKET_PAREN_L;
          }
        case 147: break;
        case 81: 
          { return OTHER_PUBLIC;
          }
        case 148: break;
        case 106: 
          { return DIR_PRAGMA_DEPRECATED;
          }
        case 149: break;
        case 24: 
          { return BRACKET_PAREN_R;
          }
        case 150: break;
        case 66: 
          { return KEY_CASE;
          }
        case 151: break;
        case 99: 
          { return DIR_ASSERT;
          }
        case 152: break;
        case 90: 
          { return DIR_ENDIF;
          }
        case 153: break;
        case 100: 
          { return KEY_CONTINUE;
          }
        case 154: break;
        case 14: 
          { return OP_BITAND;
          }
        case 155: break;
        case 65: 
          { return OTHER_ENUM;
          }
        case 156: break;
        case 37: 
          { return OP_LT_EQ;
          }
        case 157: break;
        case 17: 
          { return OP_NOT;
          }
        case 158: break;
        case 87: 
          { return KEY_SWITCH;
          }
        case 159: break;
        case 58: 
          { return OP_BITUSHIFTR;
          }
        case 160: break;
        case 25: 
          { return SYNTAX_COLON;
          }
        case 161: break;
        case 19: 
          { return BRACKET_SQUARE_L;
          }
        case 162: break;
        case 50: 
          { return KEY_IF;
          }
        case 163: break;
        case 63: 
          { return KEY_EXIT;
          }
        case 164: break;
        case 88: 
          { return OTHER_NATIVE;
          }
        case 165: break;
        case 9: 
          { return OP_LT;
          }
        case 166: break;
        case 8: 
          { return OP_MUL;
          }
        case 167: break;
        case 20: 
          { return BRACKET_SQUARE_R;
          }
        case 168: break;
        case 69: 
          { return OP_BITUSHIFTR_EQ;
          }
        case 169: break;
        case 31: 
          { return OP_DEC_EQ;
          }
        case 170: break;
        case 48: 
          { return OP_BITXOR_EQ;
          }
        case 171: break;
        case 34: 
          { return OP_DIV_EQ;
          }
        case 172: break;
        case 95: 
          { return OTHER_FORWARD;
          }
        case 173: break;
        case 39: 
          { return OP_GT_EQ;
          }
        case 174: break;
        case 75: 
          { return KEY_SLEEP;
          }
        case 175: break;
        case 10: 
          { return OP_GT;
          }
        case 176: break;
        case 4: 
          { return CONSTANT_INTEGER;
          }
        case 177: break;
        case 26: 
          { return SYNTAX_SEMICOLON;
          }
        case 178: break;
        case 28: 
          { return SYNTAX_COMMA;
          }
        case 179: break;
        case 55: 
          { return CONSTANT_CHARACTER;
          }
        case 180: break;
        case 101: 
          { return OTHER_FUNCENUM;
          }
        case 181: break;
        case 107: 
          { return DIR_TRYINC;
          }
        case 182: break;
        case 77: 
          { return KEY_WHILE;
          }
        case 183: break;
        case 33: 
          { return LINE_COMMENT;
          }
        case 184: break;
        case 61: 
          { return DIR_IF;
          }
        case 185: break;
        case 16: 
          { return OP_BITXOR;
          }
        case 186: break;
        case 45: 
          { return OP_AND;
          }
        case 187: break;
        case 47: 
          { return OP_OR;
          }
        case 188: break;
        case 35: 
          { return OP_MUL_EQ;
          }
        case 189: break;
        case 36: 
          { return OP_BITSHIFTL;
          }
        case 190: break;
        case 21: 
          { return BRACKET_CURLY_L;
          }
        case 191: break;
        case 76: 
          { return KEY_BREAK;
          }
        case 192: break;
        case 38: 
          { return OP_BITSHIFTR;
          }
        case 193: break;
        case 74: 
          { return OTHER_STOCK;
          }
        case 194: break;
        case 22: 
          { return BRACKET_CURLY_R;
          }
        case 195: break;
        case 60: 
          { return OTHER_NEW;
          }
        case 196: break;
        case 67: 
          { return CONSTANT_BOOLEAN;
          }
        case 197: break;
        case 96: 
          { return DIR_DEFINE;
          }
        case 198: break;
        case 59: 
          { return OP_BITSHIFTR_EQ;
          }
        case 199: break;
        case 105: 
          { return DIR_ENDINPUT;
          }
        case 200: break;
        case 108: 
          { return WHITE_SPACE;
          }
        case 201: break;
        case 89: 
          { return DIR_ERROR;
          }
        case 202: break;
        case 40: 
          { return OP_EQ_EQ;
          }
        case 203: break;
        case 80: 
          { return DIR_LINE;
          }
        case 204: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 205: break;
        case 57: 
          { return OP_BITSHIFTL_EQ;
          }
        case 206: break;
        case 102: 
          { return DIR_SECTION;
          }
        case 207: break;
        case 53: 
          { return SYNTAX_ELLIPSIS;
          }
        case 208: break;
        case 46: 
          { return OP_BITOR_EQ;
          }
        case 209: break;
        case 54: 
          { return KEY_FOR;
          }
        case 210: break;
        case 13: 
          { return OP_REM;
          }
        case 211: break;
        case 86: 
          { return OP_SIZEOF;
          }
        case 212: break;
        case 56: 
          { return PATH;
          }
        case 213: break;
        case 7: 
          { return OP_DIV;
          }
        case 214: break;
        case 12: 
          { return OP_ADD;
          }
        case 215: break;
        case 91: 
          { return DIR_UNDEF;
          }
        case 216: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
