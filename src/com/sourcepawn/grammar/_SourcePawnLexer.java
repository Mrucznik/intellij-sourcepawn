/* The following code was generated by JFlex 1.4.3 on 14/06/14 2:34 PM */

package com.sourcepawn.grammar;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static com.sourcepawn.psi.SourcePawnTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 14/06/14 2:34 PM from the specification file
 * <tt>C:/Users/isaac/Desktop/sourcemod/intellij-sourcepawn-master/src/com/sourcepawn/grammar/_SourcePawnLexer.flex</tt>
 */
public class _SourcePawnLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\2\1\0\1\1\1\1\22\0\1\1\1\47\1\24"+
    "\1\72\1\0\1\43\1\44\1\26\1\62\1\63\1\36\1\42\1\66"+
    "\1\15\1\17\1\35\1\12\11\16\1\34\1\64\1\37\1\41\1\40"+
    "\1\65\1\32\1\102\3\14\1\103\1\14\10\31\1\76\1\77\2\31"+
    "\1\100\1\101\6\31\1\56\1\25\1\57\1\46\1\30\1\0\1\10"+
    "\1\67\1\7\1\3\1\4\1\21\1\55\1\71\1\51\1\31\1\70"+
    "\1\22\1\73\1\52\1\54\1\5\1\31\1\6\1\23\1\11\1\20"+
    "\1\75\1\33\1\13\1\74\1\53\1\60\1\45\1\61\1\50\53\0"+
    "\1\27\12\0\1\27\4\0\1\27\5\0\27\27\1\0\37\27\1\0"+
    "\u01ca\27\4\0\14\27\16\0\5\27\7\0\1\27\1\0\1\27\201\0"+
    "\5\27\1\0\2\27\2\0\4\27\10\0\1\27\1\0\3\27\1\0"+
    "\1\27\1\0\24\27\1\0\123\27\1\0\213\27\10\0\236\27\11\0"+
    "\46\27\2\0\1\27\7\0\47\27\110\0\33\27\5\0\3\27\55\0"+
    "\53\27\43\0\2\27\1\0\143\27\1\0\1\27\17\0\2\27\7\0"+
    "\2\27\12\0\3\27\2\0\1\27\20\0\1\27\1\0\36\27\35\0"+
    "\131\27\13\0\1\27\30\0\41\27\11\0\2\27\4\0\1\27\5\0"+
    "\26\27\4\0\1\27\11\0\1\27\3\0\1\27\27\0\31\27\253\0"+
    "\66\27\3\0\1\27\22\0\1\27\7\0\12\27\17\0\7\27\1\0"+
    "\7\27\5\0\10\27\2\0\2\27\2\0\26\27\1\0\7\27\1\0"+
    "\1\27\3\0\4\27\3\0\1\27\20\0\1\27\15\0\2\27\1\0"+
    "\3\27\16\0\2\27\23\0\6\27\4\0\2\27\2\0\26\27\1\0"+
    "\7\27\1\0\2\27\1\0\2\27\1\0\2\27\37\0\4\27\1\0"+
    "\1\27\23\0\3\27\20\0\11\27\1\0\3\27\1\0\26\27\1\0"+
    "\7\27\1\0\2\27\1\0\5\27\3\0\1\27\22\0\1\27\17\0"+
    "\2\27\43\0\10\27\2\0\2\27\2\0\26\27\1\0\7\27\1\0"+
    "\2\27\1\0\5\27\3\0\1\27\36\0\2\27\1\0\3\27\17\0"+
    "\1\27\21\0\1\27\1\0\6\27\3\0\3\27\1\0\4\27\3\0"+
    "\2\27\1\0\1\27\1\0\2\27\3\0\2\27\3\0\3\27\3\0"+
    "\14\27\26\0\1\27\64\0\10\27\1\0\3\27\1\0\27\27\1\0"+
    "\12\27\1\0\5\27\3\0\1\27\32\0\2\27\6\0\2\27\43\0"+
    "\10\27\1\0\3\27\1\0\27\27\1\0\12\27\1\0\5\27\3\0"+
    "\1\27\40\0\1\27\1\0\2\27\17\0\2\27\22\0\10\27\1\0"+
    "\3\27\1\0\51\27\2\0\1\27\20\0\1\27\21\0\2\27\30\0"+
    "\6\27\5\0\22\27\3\0\30\27\1\0\11\27\1\0\1\27\2\0"+
    "\7\27\72\0\60\27\1\0\2\27\14\0\7\27\72\0\2\27\1\0"+
    "\1\27\2\0\2\27\1\0\1\27\2\0\1\27\6\0\4\27\1\0"+
    "\7\27\1\0\3\27\1\0\1\27\1\0\1\27\2\0\2\27\1\0"+
    "\4\27\1\0\2\27\11\0\1\27\2\0\5\27\1\0\1\27\25\0"+
    "\2\27\42\0\1\27\77\0\10\27\1\0\44\27\33\0\5\27\163\0"+
    "\53\27\24\0\1\27\20\0\6\27\4\0\4\27\3\0\1\27\3\0"+
    "\2\27\7\0\3\27\4\0\15\27\14\0\1\27\21\0\46\27\12\0"+
    "\53\27\1\0\1\27\3\0\u0149\27\1\0\4\27\2\0\7\27\1\0"+
    "\1\27\1\0\4\27\2\0\51\27\1\0\4\27\2\0\41\27\1\0"+
    "\4\27\2\0\7\27\1\0\1\27\1\0\4\27\2\0\17\27\1\0"+
    "\71\27\1\0\4\27\2\0\103\27\45\0\20\27\20\0\125\27\14\0"+
    "\u026c\27\2\0\21\27\1\0\32\27\5\0\113\27\25\0\15\27\1\0"+
    "\4\27\16\0\22\27\16\0\22\27\16\0\15\27\1\0\3\27\17\0"+
    "\64\27\43\0\1\27\4\0\1\27\103\0\130\27\10\0\51\27\1\0"+
    "\1\27\5\0\106\27\12\0\35\27\63\0\36\27\2\0\5\27\13\0"+
    "\54\27\25\0\7\27\70\0\27\27\11\0\65\27\122\0\1\27\135\0"+
    "\57\27\21\0\7\27\67\0\36\27\15\0\2\27\20\0\46\27\32\0"+
    "\44\27\51\0\3\27\12\0\44\27\153\0\4\27\1\0\4\27\16\0"+
    "\300\27\100\0\u0116\27\2\0\6\27\2\0\46\27\2\0\6\27\2\0"+
    "\10\27\1\0\1\27\1\0\1\27\1\0\1\27\1\0\37\27\2\0"+
    "\65\27\1\0\7\27\1\0\1\27\3\0\3\27\1\0\7\27\3\0"+
    "\4\27\2\0\6\27\4\0\15\27\5\0\3\27\1\0\7\27\164\0"+
    "\1\27\15\0\1\27\20\0\15\27\145\0\1\27\4\0\1\27\2\0"+
    "\12\27\1\0\1\27\3\0\5\27\6\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\1\0\13\27\2\0\4\27\5\0\5\27\4\0"+
    "\1\27\64\0\2\27\u0a7b\0\57\27\1\0\57\27\1\0\205\27\6\0"+
    "\4\27\21\0\46\27\12\0\66\27\11\0\1\27\20\0\27\27\11\0"+
    "\7\27\1\0\7\27\1\0\7\27\1\0\7\27\1\0\7\27\1\0"+
    "\7\27\1\0\7\27\1\0\7\27\120\0\1\27\u01d5\0\2\27\52\0"+
    "\5\27\5\0\2\27\4\0\126\27\6\0\3\27\1\0\132\27\1\0"+
    "\4\27\5\0\51\27\3\0\136\27\21\0\33\27\65\0\20\27\u0200\0"+
    "\u19b6\27\112\0\u51cc\27\64\0\u048d\27\103\0\56\27\2\0\u010d\27\3\0"+
    "\20\27\12\0\2\27\24\0\57\27\20\0\31\27\10\0\106\27\61\0"+
    "\11\27\2\0\147\27\2\0\4\27\1\0\2\27\16\0\12\27\120\0"+
    "\10\27\1\0\3\27\1\0\4\27\1\0\27\27\35\0\64\27\16\0"+
    "\62\27\76\0\6\27\3\0\1\27\16\0\34\27\12\0\27\27\31\0"+
    "\35\27\7\0\57\27\34\0\1\27\60\0\51\27\27\0\3\27\1\0"+
    "\10\27\24\0\27\27\3\0\1\27\5\0\60\27\1\0\1\27\3\0"+
    "\2\27\2\0\5\27\2\0\1\27\1\0\1\27\30\0\3\27\43\0"+
    "\6\27\2\0\6\27\2\0\6\27\11\0\7\27\1\0\7\27\221\0"+
    "\43\27\35\0\u2ba4\27\14\0\27\27\4\0\61\27\u2104\0\u012e\27\2\0"+
    "\76\27\2\0\152\27\46\0\7\27\14\0\5\27\5\0\1\27\1\0"+
    "\12\27\1\0\15\27\1\0\5\27\1\0\1\27\1\0\2\27\1\0"+
    "\2\27\1\0\154\27\41\0\u016b\27\22\0\100\27\2\0\66\27\50\0"+
    "\14\27\164\0\5\27\1\0\207\27\44\0\32\27\6\0\32\27\13\0"+
    "\131\27\3\0\6\27\2\0\6\27\2\0\6\27\2\0\3\27\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\7\3\1\4\1\3\1\5\1\4"+
    "\1\6\2\3\2\1\1\3\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\3\3\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\3\1\1\1\3\1\0\1\35"+
    "\1\36\14\0\1\37\1\40\6\0\1\3\2\0\1\41"+
    "\4\0\1\42\1\0\1\43\1\44\1\0\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\34\0\1\64\1\65"+
    "\1\66\2\0\1\67\6\0\1\70\2\0\1\70\2\0"+
    "\1\71\1\72\1\73\1\74\1\75\16\0\1\76\3\0"+
    "\1\77\2\0\1\100\1\101\1\102\2\0\1\103\3\0"+
    "\1\104\14\0\1\105\1\106\1\0\1\107\24\0\1\110"+
    "\1\0\1\111\4\0\1\112\1\0\1\113\1\114\3\0"+
    "\1\115\1\0\1\116\2\0\1\117\5\0\1\120\1\121"+
    "\6\0\1\122\1\123\1\0\1\124\3\0\1\125\1\126"+
    "\1\127\1\130\1\131\1\0\1\132\1\0\1\133\4\0"+
    "\1\134\4\0\1\135\1\136\2\0\1\137\1\140\1\141"+
    "\1\142\1\0\1\143\1\144\5\0\1\145\1\146\2\0"+
    "\1\147\1\150\1\151\1\0\1\152\1\0\1\153\1\0"+
    "\1\154";

  private static int [] zzUnpackAction() {
    int [] result = new int[304];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8\0\u03fc"+
    "\0\u0440\0\u0484\0\u04c8\0\u050c\0\104\0\u0550\0\u0594\0\u05d8"+
    "\0\u061c\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770\0\u07b4\0\u07f8"+
    "\0\104\0\u083c\0\u0880\0\u08c4\0\104\0\104\0\104\0\104"+
    "\0\104\0\104\0\104\0\104\0\104\0\u0908\0\u094c\0\u0990"+
    "\0\u09d4\0\104\0\104\0\u0a18\0\u0a5c\0\u0aa0\0\u0ae4\0\u0b28"+
    "\0\u0b6c\0\u0bb0\0\u0bf4\0\u0c38\0\u0c7c\0\u0cc0\0\u0d04\0\104"+
    "\0\104\0\u0d48\0\u0d8c\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c\0\u0ee0"+
    "\0\u0f24\0\u0484\0\104\0\u0f68\0\u0fac\0\u0ff0\0\u1034\0\u1078"+
    "\0\u10bc\0\104\0\104\0\u1100\0\u1144\0\u1100\0\u1188\0\104"+
    "\0\104\0\104\0\104\0\104\0\104\0\104\0\104\0\104"+
    "\0\104\0\104\0\104\0\u11cc\0\u1210\0\u1254\0\u1298\0\u12dc"+
    "\0\u1320\0\u1364\0\u13a8\0\u13ec\0\u1430\0\u1474\0\u14b8\0\u14fc"+
    "\0\u1540\0\u1584\0\u15c8\0\u160c\0\u1650\0\u1694\0\u16d8\0\u171c"+
    "\0\u1760\0\u17a4\0\u17e8\0\u182c\0\u1870\0\u18b4\0\u18f8\0\u0cc0"+
    "\0\u0d04\0\104\0\u193c\0\u1980\0\u19c4\0\u1a08\0\u1a4c\0\u1a90"+
    "\0\u1ad4\0\u1b18\0\u1b5c\0\104\0\u1ba0\0\u1be4\0\u0fac\0\u1c28"+
    "\0\u1c6c\0\u1100\0\u1100\0\u1cb0\0\104\0\104\0\u1cf4\0\u1d38"+
    "\0\u1d7c\0\u1dc0\0\u1e04\0\u1e48\0\u1e8c\0\u1ed0\0\u1f14\0\u1f58"+
    "\0\u1f9c\0\u1fe0\0\u2024\0\u2068\0\104\0\u20ac\0\u20f0\0\u2134"+
    "\0\104\0\u2178\0\u21bc\0\104\0\104\0\104\0\u2200\0\u2244"+
    "\0\104\0\u2288\0\u22cc\0\u2310\0\104\0\u2354\0\u2398\0\u23dc"+
    "\0\u2420\0\u2464\0\u24a8\0\u24ec\0\u2530\0\u2574\0\u25b8\0\u25fc"+
    "\0\u2640\0\u10bc\0\104\0\u2684\0\104\0\u26c8\0\u270c\0\u2750"+
    "\0\u2794\0\u27d8\0\u281c\0\u2860\0\u28a4\0\u28e8\0\u292c\0\u2970"+
    "\0\u29b4\0\u29f8\0\u2a3c\0\u2a80\0\u2ac4\0\u2b08\0\u2b4c\0\u2b90"+
    "\0\u2bd4\0\104\0\u2c18\0\104\0\u2c5c\0\u2ca0\0\u2ce4\0\u2d28"+
    "\0\104\0\u2d6c\0\104\0\104\0\u2db0\0\u2df4\0\u2e38\0\104"+
    "\0\u2e7c\0\104\0\u2ec0\0\u2f04\0\u2f48\0\u2f8c\0\u2fd0\0\u3014"+
    "\0\u3058\0\u309c\0\104\0\104\0\u30e0\0\u3124\0\u3168\0\u31ac"+
    "\0\u31f0\0\u3234\0\104\0\104\0\u3278\0\104\0\u32bc\0\u3300"+
    "\0\u3344\0\104\0\104\0\104\0\104\0\104\0\u3388\0\104"+
    "\0\u33cc\0\104\0\u3410\0\u3454\0\u3498\0\u34dc\0\104\0\u3520"+
    "\0\u3564\0\u35a8\0\u35ec\0\104\0\104\0\u3630\0\u3674\0\104"+
    "\0\104\0\104\0\104\0\u36b8\0\104\0\104\0\u36fc\0\u3740"+
    "\0\u3784\0\u37c8\0\u380c\0\104\0\104\0\u3850\0\u3894\0\104"+
    "\0\104\0\104\0\u38d8\0\104\0\u391c\0\u3960\0\u39a4\0\104";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[304];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\2\14\1\15\1\16\1\17\1\14\1\20"+
    "\1\14\1\21\1\22\1\2\1\23\1\2\2\14\1\2"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\2\14\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\2\14\1\57\3\14\1\60"+
    "\5\14\105\0\2\3\105\0\1\61\25\0\2\14\1\62"+
    "\17\0\1\63\42\0\1\64\6\0\1\65\7\0\2\14"+
    "\1\62\15\0\1\66\51\0\1\67\11\0\2\14\1\62"+
    "\53\0\1\70\25\0\2\14\1\62\57\0\1\71\21\0"+
    "\2\14\1\62\17\0\1\72\52\0\1\73\6\0\2\14"+
    "\1\62\55\0\1\74\1\0\1\75\21\0\2\14\1\62"+
    "\61\0\1\16\1\76\2\0\1\16\1\77\116\0\2\14"+
    "\1\62\61\0\1\16\2\0\1\100\1\16\22\0\1\101"+
    "\54\0\1\16\3\0\1\16\1\77\103\0\1\102\74\0"+
    "\1\103\7\0\1\104\11\0\2\14\1\62\17\0\1\105"+
    "\40\0\1\106\10\0\1\107\7\0\1\14\1\110\1\62"+
    "\14\0\1\111\32\0\24\112\1\113\1\114\56\112\2\115"+
    "\1\0\22\115\1\116\56\115\32\0\2\14\1\62\34\0"+
    "\1\117\47\0\1\120\1\121\2\0\1\122\103\0\1\123"+
    "\42\0\2\124\1\0\34\124\1\125\1\124\1\126\42\124"+
    "\40\0\1\127\1\130\103\0\1\131\103\0\1\132\1\133"+
    "\102\0\1\134\103\0\1\135\2\0\1\136\100\0\1\137"+
    "\3\0\1\140\77\0\1\141\103\0\1\142\63\0\1\143"+
    "\10\0\2\14\1\62\53\0\1\144\3\0\1\145\21\0"+
    "\2\14\1\62\101\0\2\14\1\62\17\0\1\146\35\0"+
    "\1\147\23\0\2\14\1\62\52\0\1\150\1\151\1\152"+
    "\2\0\1\153\1\154\6\0\1\155\1\156\1\157\1\160"+
    "\25\0\1\161\64\0\2\14\1\62\42\0\1\162\11\0"+
    "\1\163\1\0\1\164\11\0\1\165\133\0\1\166\55\0"+
    "\1\167\100\0\1\170\152\0\1\171\25\0\1\172\115\0"+
    "\1\173\132\0\1\174\54\0\1\175\100\0\1\176\140\0"+
    "\1\177\31\0\2\200\2\0\2\200\3\0\1\200\4\0"+
    "\1\200\45\0\1\200\12\0\2\200\12\0\1\201\3\0"+
    "\1\201\104\0\1\202\106\0\1\203\133\0\1\204\37\0"+
    "\1\205\103\0\1\206\1\0\1\207\43\0\1\210\33\0"+
    "\1\211\131\0\2\14\1\62\14\0\1\212\105\0\1\213"+
    "\30\0\2\112\1\0\101\112\26\0\1\214\55\0\2\115"+
    "\1\0\7\115\1\215\1\216\2\115\1\215\7\115\1\217"+
    "\55\115\51\0\1\220\32\0\2\120\1\0\101\120\36\121"+
    "\1\221\45\121\2\124\1\0\35\124\1\222\45\124\1\0"+
    "\35\124\1\222\1\223\42\124\40\0\1\224\1\225\75\0"+
    "\1\226\61\0\1\227\103\0\1\230\76\0\1\231\103\0"+
    "\1\232\105\0\1\233\13\0\1\234\27\0\1\235\37\0"+
    "\1\236\120\0\1\237\66\0\1\240\147\0\1\241\102\0"+
    "\1\242\103\0\1\243\36\0\1\244\120\0\1\245\30\0"+
    "\1\246\61\0\1\247\61\0\1\250\117\0\1\251\71\0"+
    "\1\252\40\0\1\253\43\0\1\254\76\0\1\255\172\0"+
    "\1\256\32\0\1\257\101\0\1\260\67\0\1\261\110\0"+
    "\1\262\11\0\1\263\64\0\1\264\103\0\1\265\153\0"+
    "\1\266\52\0\1\176\67\0\1\267\127\0\1\270\70\0"+
    "\1\271\74\0\1\272\101\0\1\273\100\0\1\274\110\0"+
    "\1\275\76\0\1\276\111\0\1\277\3\0\1\277\7\0"+
    "\1\214\60\0\7\300\1\0\2\300\3\0\4\300\2\0"+
    "\1\214\1\300\1\0\1\300\1\0\1\300\15\0\5\300"+
    "\11\0\3\300\1\0\11\300\22\0\1\301\61\0\35\121"+
    "\1\302\1\221\45\121\41\0\1\303\113\0\1\304\106\0"+
    "\1\305\37\0\1\306\114\0\1\307\70\0\1\310\120\0"+
    "\1\311\63\0\1\312\110\0\1\313\116\0\1\314\154\0"+
    "\1\315\12\0\1\316\122\0\1\317\133\0\1\320\40\0"+
    "\1\321\103\0\1\322\174\0\1\323\7\0\1\324\117\0"+
    "\1\325\135\0\1\326\102\0\1\327\40\0\1\330\146\0"+
    "\1\331\43\0\1\332\100\0\1\333\116\0\1\334\66\0"+
    "\1\335\4\0\1\336\102\0\1\337\102\0\1\340\100\0"+
    "\1\341\44\0\1\342\122\0\1\343\20\0\1\344\105\0"+
    "\1\345\150\0\1\346\41\0\1\115\3\0\1\115\70\0"+
    "\7\347\1\0\2\347\3\0\4\347\3\0\1\347\1\0"+
    "\1\347\1\0\1\347\15\0\5\347\11\0\3\347\1\0"+
    "\11\347\4\0\1\350\174\0\1\351\76\0\1\352\64\0"+
    "\1\353\106\0\1\354\33\0\1\355\150\0\1\356\107\0"+
    "\1\357\32\0\1\360\150\0\1\361\36\0\1\362\103\0"+
    "\1\363\103\0\1\364\110\0\1\365\114\0\1\366\162\0"+
    "\1\367\11\0\1\370\116\0\1\371\65\0\1\372\106\0"+
    "\1\373\146\0\1\374\103\0\1\375\42\0\1\376\144\0"+
    "\1\377\41\0\1\u0100\101\0\1\u0101\106\0\1\u0102\101\0"+
    "\1\u0103\165\0\1\u0104\33\0\1\u0105\65\0\7\115\1\0"+
    "\2\115\3\0\4\115\3\0\1\115\1\0\1\115\1\0"+
    "\1\115\15\0\5\115\11\0\3\115\1\0\11\115\4\0"+
    "\1\u0106\151\0\1\u0107\37\0\1\u0108\146\0\1\u0109\53\0"+
    "\1\u010a\30\0\1\u010b\124\0\1\u010c\16\0\1\u010d\147\0"+
    "\1\u010e\52\0\1\u010f\133\0\1\u0110\52\0\1\u0111\165\0"+
    "\1\u0112\11\0\1\u0113\104\0\1\u0114\75\0\1\u0115\120\0"+
    "\1\u0116\103\0\1\u0117\140\0\1\u0118\31\0\1\u0119\104\0"+
    "\1\u011a\120\0\1\u011b\67\0\1\u011c\106\0\1\u011d\104\0"+
    "\1\u011e\101\0\1\u011f\150\0\1\u0120\32\0\1\u0121\201\0"+
    "\1\u0122\13\0\1\u0123\76\0\1\u0124\172\0\1\u0125\30\0"+
    "\1\u0126\105\0\1\u0127\133\0\1\u0128\35\0\1\u0129\202\0"+
    "\1\u012a\4\0\1\u012b\110\0\1\u012c\112\0\1\u012d\66\0"+
    "\1\u012e\103\0\1\u012f\100\0\2\u012e\1\0\101\u012e\4\0"+
    "\1\u0130\77\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14824];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\22\1\1\11\13\1\1\11\3\1\11\11"+
    "\3\1\1\0\2\11\14\0\2\11\6\0\1\1\2\0"+
    "\1\11\4\0\1\1\1\0\2\11\1\0\3\1\14\11"+
    "\34\0\2\1\1\11\2\0\1\1\6\0\1\11\2\0"+
    "\1\1\2\0\3\1\2\11\16\0\1\11\3\0\1\11"+
    "\2\0\3\11\2\0\1\11\3\0\1\11\14\0\1\1"+
    "\1\11\1\0\1\11\24\0\1\11\1\0\1\11\4\0"+
    "\1\11\1\0\2\11\3\0\1\11\1\0\1\11\2\0"+
    "\1\1\5\0\2\11\6\0\2\11\1\0\1\11\3\0"+
    "\5\11\1\0\1\11\1\0\1\11\4\0\1\11\4\0"+
    "\2\11\2\0\4\11\1\0\2\11\5\0\2\11\2\0"+
    "\3\11\1\0\1\11\1\0\1\1\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[304];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _SourcePawnLexer() {
    this((java.io.Reader)null);
  }


  public _SourcePawnLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _SourcePawnLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1600) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 69: 
          { return BLOCK_COMMENT;
          }
        case 109: break;
        case 86: 
          { return OTHER_STATIC;
          }
        case 110: break;
        case 63: 
          { return OTHER_DECL;
          }
        case 111: break;
        case 43: 
          { return OP_INC;
          }
        case 112: break;
        case 42: 
          { return OP_INC_EQ;
          }
        case 113: break;
        case 98: 
          { return DIR_ELSEIF;
          }
        case 114: break;
        case 73: 
          { return OP_TAGOF;
          }
        case 115: break;
        case 80: 
          { return DIR_FILE;
          }
        case 116: break;
        case 19: 
          { return OP_BITNOT;
          }
        case 117: break;
        case 45: 
          { return OP_BITAND_EQ;
          }
        case 118: break;
        case 44: 
          { return OP_REM_EQ;
          }
        case 119: break;
        case 53: 
          { return CONSTANT_FLOAT;
          }
        case 120: break;
        case 99: 
          { return DIR_PRAGMA;
          }
        case 121: break;
        case 33: 
          { return CONSTANT_STRING;
          }
        case 122: break;
        case 50: 
          { return OP_NOT_EQ;
          }
        case 123: break;
        case 79: 
          { return DIR_ELSE;
          }
        case 124: break;
        case 95: 
          { return OTHER_FUNCTAG;
          }
        case 125: break;
        case 30: 
          { return KEY_DO;
          }
        case 126: break;
        case 3: 
          { return ID;
          }
        case 127: break;
        case 12: 
          { return OP_EQ;
          }
        case 128: break;
        case 105: 
          { return OP_STATE;
          }
        case 129: break;
        case 93: 
          { return KEY_DEFAULT;
          }
        case 130: break;
        case 31: 
          { return OP_DEC;
          }
        case 131: break;
        case 27: 
          { return SYNTAX_QUESTION;
          }
        case 132: break;
        case 83: 
          { return KEY_RETURN;
          }
        case 133: break;
        case 104: 
          { return DIR_INCLUDE;
          }
        case 134: break;
        case 52: 
          { return CONSTANT_HEX;
          }
        case 135: break;
        case 16: 
          { return OP_BITOR;
          }
        case 136: break;
        case 84: 
          { return KEY_ASSERT;
          }
        case 137: break;
        case 5: 
          { return OP_SUB;
          }
        case 138: break;
        case 94: 
          { return OP_DEFINED;
          }
        case 139: break;
        case 6: 
          { return SYNTAX_DOT;
          }
        case 140: break;
        case 65: 
          { return KEY_ELSE;
          }
        case 141: break;
        case 85: 
          { return OTHER_STRUCT;
          }
        case 142: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 143: break;
        case 72: 
          { return OTHER_CONST;
          }
        case 144: break;
        case 74: 
          { return KEY_STATE;
          }
        case 145: break;
        case 71: 
          { return KEY_GOTO;
          }
        case 146: break;
        case 24: 
          { return BRACKET_PAREN_L;
          }
        case 147: break;
        case 82: 
          { return OTHER_PUBLIC;
          }
        case 148: break;
        case 107: 
          { return DIR_PRAGMA_DEPRECATED;
          }
        case 149: break;
        case 25: 
          { return BRACKET_PAREN_R;
          }
        case 150: break;
        case 67: 
          { return KEY_CASE;
          }
        case 151: break;
        case 100: 
          { return DIR_ASSERT;
          }
        case 152: break;
        case 91: 
          { return DIR_ENDIF;
          }
        case 153: break;
        case 101: 
          { return KEY_CONTINUE;
          }
        case 154: break;
        case 15: 
          { return OP_BITAND;
          }
        case 155: break;
        case 66: 
          { return OTHER_ENUM;
          }
        case 156: break;
        case 38: 
          { return OP_LT_EQ;
          }
        case 157: break;
        case 18: 
          { return OP_NOT;
          }
        case 158: break;
        case 87: 
          { return KEY_SWITCH;
          }
        case 159: break;
        case 59: 
          { return OP_BITUSHIFTR;
          }
        case 160: break;
        case 7: 
          { return SYNTAX_COLON;
          }
        case 161: break;
        case 20: 
          { return BRACKET_SQUARE_L;
          }
        case 162: break;
        case 51: 
          { return KEY_IF;
          }
        case 163: break;
        case 64: 
          { return KEY_EXIT;
          }
        case 164: break;
        case 89: 
          { return OTHER_NATIVE;
          }
        case 165: break;
        case 10: 
          { return OP_LT;
          }
        case 166: break;
        case 9: 
          { return OP_MUL;
          }
        case 167: break;
        case 21: 
          { return BRACKET_SQUARE_R;
          }
        case 168: break;
        case 29: 
          { return TAG;
          }
        case 169: break;
        case 70: 
          { return OP_BITUSHIFTR_EQ;
          }
        case 170: break;
        case 32: 
          { return OP_DEC_EQ;
          }
        case 171: break;
        case 49: 
          { return OP_BITXOR_EQ;
          }
        case 172: break;
        case 35: 
          { return OP_DIV_EQ;
          }
        case 173: break;
        case 96: 
          { return OTHER_FORWARD;
          }
        case 174: break;
        case 40: 
          { return OP_GT_EQ;
          }
        case 175: break;
        case 76: 
          { return KEY_SLEEP;
          }
        case 176: break;
        case 11: 
          { return OP_GT;
          }
        case 177: break;
        case 4: 
          { return CONSTANT_INTEGER;
          }
        case 178: break;
        case 26: 
          { return SYNTAX_SEMICOLON;
          }
        case 179: break;
        case 28: 
          { return SYNTAX_COMMA;
          }
        case 180: break;
        case 56: 
          { return CONSTANT_CHARACTER;
          }
        case 181: break;
        case 102: 
          { return OTHER_FUNCENUM;
          }
        case 182: break;
        case 108: 
          { return DIR_TRYINC;
          }
        case 183: break;
        case 77: 
          { return KEY_WHILE;
          }
        case 184: break;
        case 34: 
          { return LINE_COMMENT;
          }
        case 185: break;
        case 62: 
          { return DIR_IF;
          }
        case 186: break;
        case 17: 
          { return OP_BITXOR;
          }
        case 187: break;
        case 46: 
          { return OP_AND;
          }
        case 188: break;
        case 48: 
          { return OP_OR;
          }
        case 189: break;
        case 36: 
          { return OP_MUL_EQ;
          }
        case 190: break;
        case 37: 
          { return OP_BITSHIFTL;
          }
        case 191: break;
        case 22: 
          { return BRACKET_CURLY_L;
          }
        case 192: break;
        case 78: 
          { return KEY_BREAK;
          }
        case 193: break;
        case 39: 
          { return OP_BITSHIFTR;
          }
        case 194: break;
        case 75: 
          { return OTHER_STOCK;
          }
        case 195: break;
        case 23: 
          { return BRACKET_CURLY_R;
          }
        case 196: break;
        case 61: 
          { return OTHER_NEW;
          }
        case 197: break;
        case 68: 
          { return CONSTANT_BOOLEAN;
          }
        case 198: break;
        case 97: 
          { return DIR_DEFINE;
          }
        case 199: break;
        case 60: 
          { return OP_BITSHIFTR_EQ;
          }
        case 200: break;
        case 106: 
          { return DIR_ENDINPUT;
          }
        case 201: break;
        case 90: 
          { return DIR_ERROR;
          }
        case 202: break;
        case 41: 
          { return OP_EQ_EQ;
          }
        case 203: break;
        case 81: 
          { return DIR_LINE;
          }
        case 204: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 205: break;
        case 58: 
          { return OP_BITSHIFTL_EQ;
          }
        case 206: break;
        case 103: 
          { return DIR_SECTION;
          }
        case 207: break;
        case 54: 
          { return SYNTAX_ELLIPSIS;
          }
        case 208: break;
        case 47: 
          { return OP_BITOR_EQ;
          }
        case 209: break;
        case 55: 
          { return KEY_FOR;
          }
        case 210: break;
        case 14: 
          { return OP_REM;
          }
        case 211: break;
        case 88: 
          { return OP_SIZEOF;
          }
        case 212: break;
        case 57: 
          { return PATH;
          }
        case 213: break;
        case 8: 
          { return OP_DIV;
          }
        case 214: break;
        case 13: 
          { return OP_ADD;
          }
        case 215: break;
        case 92: 
          { return DIR_UNDEF;
          }
        case 216: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
